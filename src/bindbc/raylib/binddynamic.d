module bindbc.raylib.binddynamic;

version (BindBC_Static) {
} else version (BindRaylib_Static) {
} else {
   version = BindRaylib_Dynamic;
}

version (BindRaylib_Dynamic):

import bindbc.loader;
import bindbc.raylib.types;

extern (C) @nogc nothrow {
   alias pInitWindow = void function(int width, int height, const(char)* title);
   alias pWindowShouldClose = bool function();
   alias pCloseWindow = void function();
   alias pIsWindowReady = bool function();
   alias pIsWindowFullscreen = bool function();
   alias pIsWindowHidden = bool function();
   alias pIsWindowMinimized = bool function();
   alias pIsWindowMaximized = bool function();
   alias pIsWindowFocused = bool function();
   alias pIsWindowResized = bool function();
   alias pIsWindowState = bool function(uint flag);
   alias pSetWindowState = void function(uint flags);
   alias pClearWindowState = void function(uint flags);
   alias pToggleFullscreen = void function();
   alias pMaximizeWindow = void function();
   alias pMinimizeWindow = void function();
   alias pRestoreWindow = void function();
   alias pSetWindowIcon = void function(Image image);
   alias pSetWindowTitle = void function(const(char)* title);
   alias pSetWindowPosition = void function(int x, int y);
   alias pSetWindowMonitor = void function(int monitor);
   alias pSetWindowMinSize = void function(int width, int height);
   alias pSetWindowSize = void function(int width, int height);
   alias pGetWindowHandle = void* function();
   alias pGetScreenWidth = int function();
   alias pGetScreenHeight = int function();
   alias pGetMonitorCount = int function();
   alias pGetCurrentMonitor = int function();
   alias pGetMonitorPosition = Vector2 function(int monitor);
   alias pGetMonitorWidth = int function(int monitor);
   alias pGetMonitorHeight = int function(int monitor);
   alias pGetMonitorPhysicalWidth = int function(int monitor);
   alias pGetMonitorPhysicalHeight = int function(int monitor);
   alias pGetMonitorRefreshRate = int function(int monitor);
   alias pGetWindowPosition = Vector2 function();
   alias pGetWindowScaleDPI = Vector2 function();
   alias pGetMonitorName = const(char)* function(int monitor);
   alias pSetClipboardText = void function(const(char)* text);
   alias pGetClipboardText = const(char)* function();
   alias pSwapScreenBuffer = void function();
   alias pPollInputEvents = void function();
   alias pWaitTime = void function(float ms);
   alias pShowCursor = void function();
   alias pHideCursor = void function();
   alias pIsCursorHidden = bool function();
   alias pEnableCursor = void function();
   alias pDisableCursor = void function();
   alias pIsCursorOnScreen = bool function();
   alias pClearBackground = void function(Color color);
   alias pBeginDrawing = void function();
   alias pEndDrawing = void function();
   alias pBeginMode2D = void function(Camera2D camera);
   alias pEndMode2D = void function();
   alias pBeginMode3D = void function(Camera3D camera);
   alias pEndMode3D = void function();
   alias pBeginTextureMode = void function(RenderTexture2D target);
   alias pEndTextureMode = void function();
   alias pBeginShaderMode = void function(Shader shader);
   alias pEndShaderMode = void function();
   alias pBeginBlendMode = void function(int mode);
   alias pEndBlendMode = void function();
   alias pBeginScissorMode = void function(int x, int y, int width, int height);
   alias pEndScissorMode = void function();
   alias pBeginVrStereoMode = void function(VrStereoConfig config);
   alias pEndVrStereoMode = void function();
   alias pLoadVrStereoConfig = VrStereoConfig function(VrDeviceInfo device);
   alias pUnloadVrStereoConfig = void function(VrStereoConfig config);
   alias pLoadShader = Shader function(const(char)* vsFileName, const(char)* fsFileName);
   alias pLoadShaderFromMemory = Shader function(const(char)* vsCode, const(char)* fsCode);
   alias pGetShaderLocation = int function(Shader shader, const(char)* uniformName);
   alias pGetShaderLocationAttrib = int function(Shader shader, const(char)* attribName);
   alias pSetShaderValue = void function(Shader shader, int locIndex, const void* value, int uniformType);
   alias pSetShaderValueV = void function(Shader shader, int locIndex, const void* value, int uniformType, int count);
   alias pSetShaderValueMatrix = void function(Shader shader, int locIndex, Matrix mat);
   alias pSetShaderValueTexture = void function(Shader shader, int locIndex, Texture2D texture);
   alias pUnloadShader = void function(Shader shader);
   alias pGetMouseRay = Ray function(Vector2 mousePosition, Camera camera);
   alias pGetCameraMatrix = Matrix function(Camera camera);
   alias pGetCameraMatrix2D = Matrix function(Camera2D camera);
   alias pGetWorldToScreen = Vector2 function(Vector3 position, Camera camera);
   alias pGetWorldToScreenEx = Vector2 function(Vector3 position, Camera camera, int width, int height);
   alias pGetWorldToScreen2D = Vector2 function(Vector2 position, Camera2D camera);
   alias pGetScreenToWorld2D = Vector2 function(Vector2 position, Camera2D camera);
   alias pSetTargetFPS = void function(int fps);
   alias pGetFPS = int function();
   alias pGetFrameTime = float function();
   alias pGetTime = double function();
   alias pGetRandomValue = int function(int min, int max);
   alias pSetRandomSeed = void function(uint seed);
   alias pTakeScreenshot = void function(const(char)* fileName);
   alias pSetConfigFlags = void function(uint flags);
   alias pSetTraceLogLevel = void function(int logLevel);
   alias pMemAlloc = void* function(int size);
   alias pMemRealloc = void* function(void* ptr, int size);
   alias pMemFree = void function(void* ptr);
   alias pLoadFileData = ubyte* function(const(char)* fileName, uint* bytesRead);
   alias pUnloadFileData = void function(ubyte* data);
   alias pSaveFileData = bool function(const(char)* fileName, void* data, uint bytesToWrite);
   alias pLoadFileText = char* function(const(char)* fileName);
   alias pUnloadFileText = void function(char* text);
   alias pSaveFileText = bool function(const(char)* fileName, char* text);
   alias pFileExists = bool function(const(char)* fileName);
   alias pDirectoryExists = bool function(const(char)* dirPath);
   alias pIsFileExtension = bool function(const(char)* fileName, const(char)* ext);
   alias pGetFileExtension = const(char)* function(const(char)* fileName);
   alias pGetFileName = const(char)* function(const(char)* filePath);
   alias pGetFileNameWithoutExt = const(char)* function(const(char)* filePath);
   alias pGetDirectoryPath = const(char)* function(const(char)* filePath);
   alias pGetPrevDirectoryPath = const(char)* function(const(char)* dirPath);
   alias pGetWorkingDirectory = const(char)* function();
   alias pGetDirectoryFiles = char** function(const(char)* dirPath, int* count);
   alias pClearDirectoryFiles = void function();
   alias pChangeDirectory = bool function(const(char)* dir);
   alias pIsFileDropped = bool function();
   alias pGetDroppedFiles = char** function(int* count);
   alias pClearDroppedFiles = void function();
   alias pGetFileModTime = long function(const(char)* fileName);
   alias pCompressData = ubyte* function(ubyte* data, int dataLength, int* compDataLength);
   alias pDecompressData = ubyte* function(ubyte* compData, int compDataLength, int* dataLength);
   alias pEncodeDataBase64 = char* function(const(ubyte)* data, int dataLength, int* outputLength);
   alias pDecodeDataBase64 = ubyte* function(ubyte* data, int* outputLength);
   alias pSaveStorageValue = bool function(uint position, int value);
   alias pLoadStorageValue = int function(uint position);
   alias pOpenURL = void function(const(char)* url);
   alias pIsKeyPressed = bool function(int key);
   alias pIsKeyDown = bool function(int key);
   alias pIsKeyReleased = bool function(int key);
   alias pIsKeyUp = bool function(int key);
   alias pSetExitKey = void function(int key);
   alias pGetKeyPressed = int function();
   alias pGetCharPressed = int function();
   alias pIsGamepadAvailable = bool function(int gamepad);
   alias pGetGamepadName = const(char)* function(int gamepad);
   alias pIsGamepadButtonPressed = bool function(int gamepad, int button);
   alias pIsGamepadButtonDown = bool function(int gamepad, int button);
   alias pIsGamepadButtonReleased = bool function(int gamepad, int button);
   alias pIsGamepadButtonUp = bool function(int gamepad, int button);
   alias pGetGamepadButtonPressed = int function();
   alias pGetGamepadAxisCount = int function(int gamepad);
   alias pGetGamepadAxisMovement = float function(int gamepad, int axis);
   alias pSetGamepadMappings = int function(const(char)* mappings);
   alias pIsMouseButtonPressed = bool function(int button);
   alias pIsMouseButtonDown = bool function(int button);
   alias pIsMouseButtonReleased = bool function(int button);
   alias pIsMouseButtonUp = bool function(int button);
   alias pGetMouseX = int function();
   alias pGetMouseY = int function();
   alias pGetMousePosition = Vector2 function();
   alias pGetMouseDelta = Vector2 function();
   alias pSetMousePosition = void function(int x, int y);
   alias pSetMouseOffset = void function(int offsetX, int offsetY);
   alias pSetMouseScale = void function(float scaleX, float scaleY);
   alias pGetMouseWheelMove = float function();
   alias pSetMouseCursor = void function(int cursor);
   alias pGetTouchX = int function();
   alias pGetTouchY = int function();
   alias pGetTouchPosition = Vector2 function(int index);
   alias pGetTouchPointId = int function(int index);
   alias pGetTouchPointCount = int function();
   alias pSetGesturesEnabled = void function(uint flags);
   alias pIsGestureDetected = bool function(int gesture);
   alias pGetGestureDetected = int function();
   alias pGetGestureHoldDuration = float function();
   alias pGetGestureDragVector = Vector2 function();
   alias pGetGestureDragAngle = float function();
   alias pGetGesturePinchVector = Vector2 function();
   alias pGetGesturePinchAngle = float function();
   alias pSetCameraMode = void function(Camera camera, int mode);
   alias pUpdateCamera = void function(Camera* camera);
   alias pSetCameraPanControl = void function(int keyPan);
   alias pSetCameraAltControl = void function(int keyAlt);
   alias pSetCameraSmoothZoomControl = void function(int keySmoothZoom);
   alias pSetCameraMoveControls = void function(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown);
   alias pSetShapesTexture = void function(Texture2D texture, Rectangle source);
   alias pDrawPixel = void function(int posX, int posY, Color color);
   alias pDrawPixelV = void function(Vector2 position, Color color);
   alias pDrawLine = void function(int startPosX, int startPosY, int endPosX, int endPosY, Color color);
   alias pDrawLineV = void function(Vector2 startPos, Vector2 endPos, Color color);
   alias pDrawLineEx = void function(Vector2 startPos, Vector2 endPos, float thick, Color color);
   alias pDrawLineBezier = void function(Vector2 startPos, Vector2 endPos, float thick, Color color);
   alias pDrawLineBezierQuad = void function(Vector2 startPos, Vector2 endPos, Vector2 controlPos, float thick, Color color);
   alias pDrawLineBezierCubic = void function(Vector2 startPos, Vector2 endPos, Vector2 startControlPos, Vector2 endControlPos, float thick, Color color);
   alias pDrawLineStrip = void function(Vector2* points, int pointCount, Color color);
   alias pDrawCircle = void function(int centerX, int centerY, float radius, Color color);
   alias pDrawCircleSector = void function(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);
   alias pDrawCircleSectorLines = void function(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);
   alias pDrawCircleGradient = void function(int centerX, int centerY, float radius, Color color1, Color color2);
   alias pDrawCircleV = void function(Vector2 center, float radius, Color color);
   alias pDrawCircleLines = void function(int centerX, int centerY, float radius, Color color);
   alias pDrawEllipse = void function(int centerX, int centerY, float radiusH, float radiusV, Color color);
   alias pDrawEllipseLines = void function(int centerX, int centerY, float radiusH, float radiusV, Color color);
   alias pDrawRing = void function(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);
   alias pDrawRingLines = void function(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);
   alias pDrawRectangle = void function(int posX, int posY, int width, int height, Color color);
   alias pDrawRectangleV = void function(Vector2 position, Vector2 size, Color color);
   alias pDrawRectangleRec = void function(Rectangle rec, Color color);
   alias pDrawRectanglePro = void function(Rectangle rec, Vector2 origin, float rotation, Color color);
   alias pDrawRectangleGradientV = void function(int posX, int posY, int width, int height, Color color1, Color color2);
   alias pDrawRectangleGradientH = void function(int posX, int posY, int width, int height, Color color1, Color color2);
   alias pDrawRectangleGradientEx = void function(Rectangle rec, Color col1, Color col2, Color col3, Color col4);
   alias pDrawRectangleLines = void function(int posX, int posY, int width, int height, Color color);
   alias pDrawRectangleLinesEx = void function(Rectangle rec, float lineThick, Color color);
   alias pDrawRectangleRounded = void function(Rectangle rec, float roundness, int segments, Color color);
   alias pDrawRectangleRoundedLines = void function(Rectangle rec, float roundness, int segments, float lineThick, Color color);
   alias pDrawTriangle = void function(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
   alias pDrawTriangleLines = void function(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
   alias pDrawTriangleFan = void function(Vector2* points, int pointCount, Color color);
   alias pDrawTriangleStrip = void function(Vector2* points, int pointCount, Color color);
   alias pDrawPoly = void function(Vector2 center, int sides, float radius, float rotation, Color color);
   alias pDrawPolyLines = void function(Vector2 center, int sides, float radius, float rotation, Color color);
   alias pDrawPolyLinesEx = void function(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color);
   alias pCheckCollisionRecs = bool function(Rectangle rec1, Rectangle rec2);
   alias pCheckCollisionCircles = bool function(Vector2 center1, float radius1, Vector2 center2, float radius2);
   alias pCheckCollisionCircleRec = bool function(Vector2 center, float radius, Rectangle rec);
   alias pCheckCollisionPointRec = bool function(Vector2 point, Rectangle rec);
   alias pCheckCollisionPointCircle = bool function(Vector2 point, Vector2 center, float radius);
   alias pCheckCollisionPointTriangle = bool function(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);
   alias pCheckCollisionLines = bool function(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2* collisionPoint);
   alias pCheckCollisionPointLine = bool function(Vector2 point, Vector2 p1, Vector2 p2, int threshold);
   alias pGetCollisionRec = Rectangle function(Rectangle rec1, Rectangle rec2);
   alias pLoadImage = Image function(const(char)* fileName);
   alias pLoadImageRaw = Image function(const(char)* fileName, int width, int height, int format, int headerSize);
   alias pLoadImageAnim = Image function(const(char)* fileName, int* frames);
   alias pLoadImageFromMemory = Image function(const(char)* fileType, const(ubyte)* fileData, int dataSize);
   alias pLoadImageFromTexture = Image function(Texture2D texture);
   alias pLoadImageFromScreen = Image function();
   alias pUnloadImage = void function(Image image);
   alias pExportImage = bool function(Image image, const(char)* fileName);
   alias pExportImageAsCode = bool function(Image image, const(char)* fileName);
   alias pGenImageColor = Image function(int width, int height, Color color);
   alias pGenImageGradientV = Image function(int width, int height, Color top, Color bottom);
   alias pGenImageGradientH = Image function(int width, int height, Color left, Color right);
   alias pGenImageGradientRadial = Image function(int width, int height, float density, Color inner, Color outer);
   alias pGenImageChecked = Image function(int width, int height, int checksX, int checksY, Color col1, Color col2);
   alias pGenImageWhiteNoise = Image function(int width, int height, float factor);
   alias pGenImageCellular = Image function(int width, int height, int tileSize);
   alias pImageCopy = Image function(Image image);
   alias pImageFromImage = Image function(Image image, Rectangle rec);
   alias pImageText = Image function(const(char)* text, int fontSize, Color color);
   alias pImageTextEx = Image function(Font font, const(char)* text, float fontSize, float spacing, Color tint);
   alias pImageFormat = void function(Image* image, int newFormat);
   alias pImageToPOT = void function(Image* image, Color fill);
   alias pImageCrop = void function(Image* image, Rectangle crop);
   alias pImageAlphaCrop = void function(Image* image, float threshold);
   alias pImageAlphaClear = void function(Image* image, Color color, float threshold);
   alias pImageAlphaMask = void function(Image* image, Image alphaMask);
   alias pImageAlphaPremultiply = void function(Image* image);
   alias pImageResize = void function(Image* image, int newWidth, int newHeight);
   alias pImageResizeNN = void function(Image* image, int newWidth, int newHeight);
   alias pImageResizeCanvas = void function(Image* image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);
   alias pImageMipmaps = void function(Image* image);
   alias pImageDither = void function(Image* image, int rBpp, int gBpp, int bBpp, int aBpp);
   alias pImageFlipVertical = void function(Image* image);
   alias pImageFlipHorizontal = void function(Image* image);
   alias pImageRotateCW = void function(Image* image);
   alias pImageRotateCCW = void function(Image* image);
   alias pImageColorTint = void function(Image* image, Color color);
   alias pImageColorInvert = void function(Image* image);
   alias pImageColorGrayscale = void function(Image* image);
   alias pImageColorContrast = void function(Image* image, float contrast);
   alias pImageColorBrightness = void function(Image* image, int brightness);
   alias pImageColorReplace = void function(Image* image, Color color, Color replace);
   alias pLoadImageColors = Color* function(Image image);
   alias pLoadImagePalette = Color* function(Image image, int maxPaletteSize, int* colorCount);
   alias pUnloadImageColors = void function(Color* colors);
   alias pUnloadImagePalette = void function(Color* colors);
   alias pGetImageAlphaBorder = Rectangle function(Image image, float threshold);
   alias pGetImageColor = Color function(Image image, int x, int y);
   alias pImageClearBackground = void function(Image* dst, Color color);
   alias pImageDrawPixel = void function(Image* dst, int posX, int posY, Color color);
   alias pImageDrawPixelV = void function(Image* dst, Vector2 position, Color color);
   alias pImageDrawLine = void function(Image* dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color);
   alias pImageDrawLineV = void function(Image* dst, Vector2 start, Vector2 end, Color color);
   alias pImageDrawCircle = void function(Image* dst, int centerX, int centerY, int radius, Color color);
   alias pImageDrawCircleV = void function(Image* dst, Vector2 center, int radius, Color color);
   alias pImageDrawRectangle = void function(Image* dst, int posX, int posY, int width, int height, Color color);
   alias pImageDrawRectangleV = void function(Image* dst, Vector2 position, Vector2 size, Color color);
   alias pImageDrawRectangleRec = void function(Image* dst, Rectangle rec, Color color);
   alias pImageDrawRectangleLines = void function(Image* dst, Rectangle rec, int thick, Color color);
   alias pImageDraw = void function(Image* dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);
   alias pImageDrawText = void function(Image* dst, const(char)* text, int posX, int posY, int fontSize, Color color);
   alias pImageDrawTextEx = void function(Image* dst, Font font, const(char)* text, Vector2 position, float fontSize, float spacing, Color tint);
   alias pLoadTexture = Texture2D function(const(char)* fileName);
   alias pLoadTextureFromImage = Texture2D function(Image image);
   alias pLoadTextureCubemap = TextureCubemap function(Image image, int layout);
   alias pLoadRenderTexture = RenderTexture2D function(int width, int height);
   alias pUnloadTexture = void function(Texture2D texture);
   alias pUnloadRenderTexture = void function(RenderTexture2D target);
   alias pUpdateTexture = void function(Texture2D texture, const void* pixels);
   alias pUpdateTextureRec = void function(Texture2D texture, Rectangle rec, const void* pixels);
   alias pGenTextureMipmaps = void function(Texture2D* texture);
   alias pSetTextureFilter = void function(Texture2D texture, int filter);
   alias pSetTextureWrap = void function(Texture2D texture, int wrap);
   alias pDrawTexture = void function(Texture2D texture, int posX, int posY, Color tint);
   alias pDrawTextureV = void function(Texture2D texture, Vector2 position, Color tint);
   alias pDrawTextureEx = void function(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);
   alias pDrawTextureRec = void function(Texture2D texture, Rectangle source, Vector2 position, Color tint);
   alias pDrawTextureQuad = void function(Texture2D texture, Vector2 tiling, Vector2 offset, Rectangle quad, Color tint);
   alias pDrawTextureTiled = void function(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, float scale, Color tint);
   alias pDrawTexturePro = void function(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint);
   alias pDrawTextureNPatch = void function(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint);
   alias pDrawTexturePoly = void function(Texture2D texture, Vector2 center, Vector2* points, Vector2* texcoords, int pointCount, Color tint);
   alias pFade = Color function(Color color, float alpha);
   alias pColorToInt = int function(Color color);
   alias pColorNormalize = Vector4 function(Color color);
   alias pColorFromNormalized = Color function(Vector4 normalized);
   alias pColorToHSV = Vector3 function(Color color);
   alias pColorFromHSV = Color function(float hue, float saturation, float value);
   alias pColorAlpha = Color function(Color color, float alpha);
   alias pColorAlphaBlend = Color function(Color dst, Color src, Color tint);
   alias pGetColor = Color function(uint hexValue);
   alias pGetPixelColor = Color function(void* srcPtr, int format);
   alias pSetPixelColor = void function(void* dstPtr, Color color, int format);
   alias pGetPixelDataSize = int function(int width, int height, int format);
   alias pGetFontDefault = Font function();
   alias pLoadFont = Font function(const(char)* fileName);
   alias pLoadFontEx = Font function(const(char)* fileName, int fontSize, int* fontChars, int glyphCount);
   alias pLoadFontFromImage = Font function(Image image, Color key, int firstChar);
   alias pLoadFontFromMemory = Font function(const(char)* fileType, const(ubyte)* fileData, int dataSize, int fontSize, int* fontChars, int glyphCount);
   alias pLoadFontData = GlyphInfo* function(const(ubyte)* fileData, int dataSize, int fontSize, int* fontChars, int glyphCount, int type);
   alias pGenImageFontAtlas = Image function(const GlyphInfo* chars, Rectangle** recs, int glyphCount, int fontSize, int padding, int packMethod);
   alias pUnloadFontData = void function(GlyphInfo* chars, int glyphCount);
   alias pUnloadFont = void function(Font font);
   alias pDrawFPS = void function(int posX, int posY);
   alias pDrawText = void function(const(char)* text, int posX, int posY, int fontSize, Color color);
   alias pDrawTextEx = void function(Font font, const(char)* text, Vector2 position, float fontSize, float spacing, Color tint);
   alias pDrawTextPro = void function(Font font, const(char)* text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint);
   alias pDrawTextCodepoint = void function(Font font, int codepoint, Vector2 position, float fontSize, Color tint);
   alias pMeasureText = int function(const(char)* text, int fontSize);
   alias pMeasureTextEx = Vector2 function(Font font, const(char)* text, float fontSize, float spacing);
   alias pGetGlyphIndex = int function(Font font, int codepoint);
   alias pGetGlyphInfo = GlyphInfo function(Font font, int codepoint);
   alias pGetGlyphAtlasRec = Rectangle function(Font font, int codepoint);
   alias pLoadCodepoints = int* function(const(char)* text, int* count);
   alias pUnloadCodepoints = void function(int* codepoints);
   alias pGetCodepointCount = int function(const(char)* text);
   alias pGetCodepoint = int function(const(char)* text, int* bytesProcessed);
   alias pCodepointToUTF8 = const(char)* function(int codepoint, int* byteSize);
   alias pTextCodepointsToUTF8 = char* function(int* codepoints, int length);
   alias pTextCopy = int function(char* dst, const(char)* src);
   alias pTextIsEqual = bool function(const(char)* text1, const(char)* text2);
   alias pTextLength = uint function(const(char)* text);
   alias pTextSubtext = const(char)* function(const(char)* text, int position, int length);
   alias pTextReplace = char* function(char* text, const(char)* replace, const(char)* by);
   alias pTextInsert = char* function(const(char)* text, const(char)* insert, int position);
   alias pTextJoin = const(char)* function(const char** textList, int count, const(char)* delimiter);
   alias pTextSplit = const char** function(const(char)* text, char delimiter, int* count);
   alias pTextAppend = void function(char* text, const(char)* append, int* position);
   alias pTextFindIndex = int function(const(char)* text, const(char)* find);
   alias pTextToUpper = const(char)* function(const(char)* text);
   alias pTextToLower = const(char)* function(const(char)* text);
   alias pTextToPascal = const(char)* function(const(char)* text);
   alias pTextToInteger = int function(const(char)* text);
   alias pDrawLine3D = void function(Vector3 startPos, Vector3 endPos, Color color);
   alias pDrawPoint3D = void function(Vector3 position, Color color);
   alias pDrawCircle3D = void function(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);
   alias pDrawTriangle3D = void function(Vector3 v1, Vector3 v2, Vector3 v3, Color color);
   alias pDrawTriangleStrip3D = void function(Vector3* points, int pointCount, Color color);
   alias pDrawCube = void function(Vector3 position, float width, float height, float length, Color color);
   alias pDrawCubeV = void function(Vector3 position, Vector3 size, Color color);
   alias pDrawCubeWires = void function(Vector3 position, float width, float height, float length, Color color);
   alias pDrawCubeWiresV = void function(Vector3 position, Vector3 size, Color color);
   alias pDrawCubeTexture = void function(Texture2D texture, Vector3 position, float width, float height, float length, Color color);
   alias pDrawCubeTextureRec = void function(Texture2D texture, Rectangle source, Vector3 position, float width, float height, float length, Color color);
   alias pDrawSphere = void function(Vector3 centerPos, float radius, Color color);
   alias pDrawSphereEx = void function(Vector3 centerPos, float radius, int rings, int slices, Color color);
   alias pDrawSphereWires = void function(Vector3 centerPos, float radius, int rings, int slices, Color color);
   alias pDrawCylinder = void function(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
   alias pDrawCylinderEx = void function(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);
   alias pDrawCylinderWires = void function(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
   alias pDrawCylinderWiresEx = void function(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);
   alias pDrawPlane = void function(Vector3 centerPos, Vector2 size, Color color);
   alias pDrawRay = void function(Ray ray, Color color);
   alias pDrawGrid = void function(int slices, float spacing);
   alias pLoadModel = Model function(const(char)* fileName);
   alias pLoadModelFromMesh = Model function(Mesh mesh);
   alias pUnloadModel = void function(Model model);
   alias pUnloadModelKeepMeshes = void function(Model model);
   alias pGetModelBoundingBox = BoundingBox function(Model model);
   alias pDrawModel = void function(Model model, Vector3 position, float scale, Color tint);
   alias pDrawModelEx = void function(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
   alias pDrawModelWires = void function(Model model, Vector3 position, float scale, Color tint);
   alias pDrawModelWiresEx = void function(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
   alias pDrawBoundingBox = void function(BoundingBox box, Color color);
   alias pDrawBillboard = void function(Camera camera, Texture2D texture, Vector3 position, float size, Color tint);
   alias pDrawBillboardRec = void function(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint);
   alias pDrawBillboardPro = void function(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint);
   alias pUploadMesh = void function(Mesh* mesh, bool dynamic);
   alias pUpdateMeshBuffer = void function(Mesh mesh, int index, void* data, int dataSize, int offset);
   alias pUnloadMesh = void function(Mesh mesh);
   alias pDrawMesh = void function(Mesh mesh, Material material, Matrix transform);
   alias pDrawMeshInstanced = void function(Mesh mesh, Material material, Matrix* transforms, int instances);
   alias pExportMesh = bool function(Mesh mesh, const(char)* fileName);
   alias pGetMeshBoundingBox = BoundingBox function(Mesh mesh);
   alias pGenMeshTangents = void function(Mesh* mesh);
   alias pGenMeshBinormals = void function(Mesh* mesh);
   alias pGenMeshPoly = Mesh function(int sides, float radius);
   alias pGenMeshPlane = Mesh function(float width, float length, int resX, int resZ);
   alias pGenMeshCube = Mesh function(float width, float height, float length);
   alias pGenMeshSphere = Mesh function(float radius, int rings, int slices);
   alias pGenMeshHemiSphere = Mesh function(float radius, int rings, int slices);
   alias pGenMeshCylinder = Mesh function(float radius, float height, int slices);
   alias pGenMeshCone = Mesh function(float radius, float height, int slices);
   alias pGenMeshTorus = Mesh function(float radius, float size, int radSeg, int sides);
   alias pGenMeshKnot = Mesh function(float radius, float size, int radSeg, int sides);
   alias pGenMeshHeightmap = Mesh function(Image heightmap, Vector3 size);
   alias pGenMeshCubicmap = Mesh function(Image cubicmap, Vector3 cubeSize);
   alias pLoadMaterials = Material* function(const(char)* fileName, int* materialCount);
   alias pLoadMaterialDefault = Material function();
   alias pUnloadMaterial = void function(Material material);
   alias pSetMaterialTexture = void function(Material* material, int mapType, Texture2D texture);
   alias pSetModelMeshMaterial = void function(Model* model, int meshId, int materialId);
   alias pLoadModelAnimations = ModelAnimation* function(const(char)* fileName, uint* animCount);
   alias pUpdateModelAnimation = void function(Model model, ModelAnimation anim, int frame);
   alias pUnloadModelAnimation = void function(ModelAnimation anim);
   alias pUnloadModelAnimations = void function(ModelAnimation* animations, uint count);
   alias pIsModelAnimationValid = bool function(Model model, ModelAnimation anim);
   alias pCheckCollisionSpheres = bool function(Vector3 center1, float radius1, Vector3 center2, float radius2);
   alias pCheckCollisionBoxes = bool function(BoundingBox box1, BoundingBox box2);
   alias pCheckCollisionBoxSphere = bool function(BoundingBox box, Vector3 center, float radius);
   alias pGetRayCollisionSphere = RayCollision function(Ray ray, Vector3 center, float radius);
   alias pGetRayCollisionBox = RayCollision function(Ray ray, BoundingBox box);
   alias pGetRayCollisionModel = RayCollision function(Ray ray, Model model);
   alias pGetRayCollisionMesh = RayCollision function(Ray ray, Mesh mesh, Matrix transform);
   alias pGetRayCollisionTriangle = RayCollision function(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);
   alias pGetRayCollisionQuad = RayCollision function(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);
   alias pInitAudioDevice = void function();
   alias pCloseAudioDevice = void function();
   alias pIsAudioDeviceReady = bool function();
   alias pSetMasterVolume = void function(float volume);
   alias pLoadWave = Wave function(const(char)* fileName);
   alias pLoadWaveFromMemory = Wave function(const(char)* fileType, const(ubyte)* fileData, int dataSize);
   alias pLoadSound = Sound function(const(char)* fileName);
   alias pLoadSoundFromWave = Sound function(Wave wave);
   alias pUpdateSound = void function(Sound sound, const void* data, int sampleCount);
   alias pUnloadWave = void function(Wave wave);
   alias pUnloadSound = void function(Sound sound);
   alias pExportWave = bool function(Wave wave, const(char)* fileName);
   alias pExportWaveAsCode = bool function(Wave wave, const(char)* fileName);
   alias pPlaySound = void function(Sound sound);
   alias pStopSound = void function(Sound sound);
   alias pPauseSound = void function(Sound sound);
   alias pResumeSound = void function(Sound sound);
   alias pPlaySoundMulti = void function(Sound sound);
   alias pStopSoundMulti = void function();
   alias pGetSoundsPlaying = int function();
   alias pIsSoundPlaying = bool function(Sound sound);
   alias pSetSoundVolume = void function(Sound sound, float volume);
   alias pSetSoundPitch = void function(Sound sound, float pitch);
   alias pWaveFormat = void function(Wave* wave, int sampleRate, int sampleSize, int channels);
   alias pWaveCopy = Wave function(Wave wave);
   alias pWaveCrop = void function(Wave* wave, int initSample, int finalSample);
   alias pLoadWaveSamples = float* function(Wave wave);
   alias pUnloadWaveSamples = void function(float* samples);
   alias pLoadMusicStream = Music function(const(char)* fileName);
   alias pLoadMusicStreamFromMemory = Music function(const(char)* fileType, ubyte* data, int dataSize);
   alias pUnloadMusicStream = void function(Music music);
   alias pPlayMusicStream = void function(Music music);
   alias pIsMusicStreamPlaying = bool function(Music music);
   alias pUpdateMusicStream = void function(Music music);
   alias pStopMusicStream = void function(Music music);
   alias pPauseMusicStream = void function(Music music);
   alias pResumeMusicStream = void function(Music music);
   alias pSeekMusicStream = void function(Music music, float position);
   alias pSetMusicVolume = void function(Music music, float volume);
   alias pSetMusicPitch = void function(Music music, float pitch);
   alias pGetMusicTimeLength = float function(Music music);
   alias pGetMusicTimePlayed = float function(Music music);
   alias pLoadAudioStream = AudioStream function(uint sampleRate, uint sampleSize, uint channels);
   alias pUnloadAudioStream = void function(AudioStream stream);
   alias pUpdateAudioStream = void function(AudioStream stream, const void* data, int frameCount);
   alias pIsAudioStreamProcessed = bool function(AudioStream stream);
   alias pPlayAudioStream = void function(AudioStream stream);
   alias pPauseAudioStream = void function(AudioStream stream);
   alias pResumeAudioStream = void function(AudioStream stream);
   alias pIsAudioStreamPlaying = bool function(AudioStream stream);
   alias pStopAudioStream = void function(AudioStream stream);
   alias pSetAudioStreamVolume = void function(AudioStream stream, float volume);
   alias pSetAudioStreamPitch = void function(AudioStream stream, float pitch);
   alias pSetAudioStreamBufferSizeDefault = void function(int size);
}

__gshared {
   pInitWindow InitWindow;
   pWindowShouldClose WindowShouldClose;
   pCloseWindow CloseWindow;
   pIsWindowReady IsWindowReady;
   pIsWindowFullscreen IsWindowFullscreen;
   pIsWindowHidden IsWindowHidden;
   pIsWindowMinimized IsWindowMinimized;
   pIsWindowMaximized IsWindowMaximized;
   pIsWindowFocused IsWindowFocused;
   pIsWindowResized IsWindowResized;
   pIsWindowState IsWindowState;
   pSetWindowState SetWindowState;
   pClearWindowState ClearWindowState;
   pToggleFullscreen ToggleFullscreen;
   pMaximizeWindow MaximizeWindow;
   pMinimizeWindow MinimizeWindow;
   pRestoreWindow RestoreWindow;
   pSetWindowIcon SetWindowIcon;
   pSetWindowTitle SetWindowTitle;
   pSetWindowPosition SetWindowPosition;
   pSetWindowMonitor SetWindowMonitor;
   pSetWindowMinSize SetWindowMinSize;
   pSetWindowSize SetWindowSize;
   pGetWindowHandle GetWindowHandle;
   pGetScreenWidth GetScreenWidth;
   pGetScreenHeight GetScreenHeight;
   pGetMonitorCount GetMonitorCount;
   pGetCurrentMonitor GetCurrentMonitor;
   pGetMonitorPosition GetMonitorPosition;
   pGetMonitorWidth GetMonitorWidth;
   pGetMonitorHeight GetMonitorHeight;
   pGetMonitorPhysicalWidth GetMonitorPhysicalWidth;
   pGetMonitorPhysicalHeight GetMonitorPhysicalHeight;
   pGetMonitorRefreshRate GetMonitorRefreshRate;
   pGetWindowPosition GetWindowPosition;
   pGetWindowScaleDPI GetWindowScaleDPI;
   pGetMonitorName GetMonitorName;
   pSetClipboardText SetClipboardText;
   pGetClipboardText GetClipboardText;
   pSwapScreenBuffer SwapScreenBuffer;
   pPollInputEvents PollInputEvents;
   pWaitTime WaitTime;
   pShowCursor ShowCursor;
   pHideCursor HideCursor;
   pIsCursorHidden IsCursorHidden;
   pEnableCursor EnableCursor;
   pDisableCursor DisableCursor;
   pIsCursorOnScreen IsCursorOnScreen;
   pClearBackground ClearBackground;
   pBeginDrawing BeginDrawing;
   pEndDrawing EndDrawing;
   pBeginMode2D BeginMode2D;
   pEndMode2D EndMode2D;
   pBeginMode3D BeginMode3D;
   pEndMode3D EndMode3D;
   pBeginTextureMode BeginTextureMode;
   pEndTextureMode EndTextureMode;
   pBeginShaderMode BeginShaderMode;
   pEndShaderMode EndShaderMode;
   pBeginBlendMode BeginBlendMode;
   pEndBlendMode EndBlendMode;
   pBeginScissorMode BeginScissorMode;
   pEndScissorMode EndScissorMode;
   pBeginVrStereoMode BeginVrStereoMode;
   pEndVrStereoMode EndVrStereoMode;
   pLoadVrStereoConfig LoadVrStereoConfig;
   pUnloadVrStereoConfig UnloadVrStereoConfig;
   pLoadShader LoadShader;
   pLoadShaderFromMemory LoadShaderFromMemory;
   pGetShaderLocation GetShaderLocation;
   pGetShaderLocationAttrib GetShaderLocationAttrib;
   pSetShaderValue SetShaderValue;
   pSetShaderValueV SetShaderValueV;
   pSetShaderValueMatrix SetShaderValueMatrix;
   pSetShaderValueTexture SetShaderValueTexture;
   pUnloadShader UnloadShader;
   pGetMouseRay GetMouseRay;
   pGetCameraMatrix GetCameraMatrix;
   pGetCameraMatrix2D GetCameraMatrix2D;
   pGetWorldToScreen GetWorldToScreen;
   pGetWorldToScreenEx GetWorldToScreenEx;
   pGetWorldToScreen2D GetWorldToScreen2D;
   pGetScreenToWorld2D GetScreenToWorld2D;
   pSetTargetFPS SetTargetFPS;
   pGetFPS GetFPS;
   pGetFrameTime GetFrameTime;
   pGetTime GetTime;
   pGetRandomValue GetRandomValue;
   pSetRandomSeed SetRandomSeed;
   pTakeScreenshot TakeScreenshot;
   pSetConfigFlags SetConfigFlags;
   pSetTraceLogLevel SetTraceLogLevel;
   pMemAlloc MemAlloc;
   pMemRealloc MemRealloc;
   pMemFree MemFree;
   pLoadFileData LoadFileData;
   pUnloadFileData UnloadFileData;
   pSaveFileData SaveFileData;
   pLoadFileText LoadFileText;
   pUnloadFileText UnloadFileText;
   pSaveFileText SaveFileText;
   pFileExists FileExists;
   pDirectoryExists DirectoryExists;
   pIsFileExtension IsFileExtension;
   pGetFileExtension GetFileExtension;
   pGetFileName GetFileName;
   pGetFileNameWithoutExt GetFileNameWithoutExt;
   pGetDirectoryPath GetDirectoryPath;
   pGetPrevDirectoryPath GetPrevDirectoryPath;
   pGetWorkingDirectory GetWorkingDirectory;
   pGetDirectoryFiles GetDirectoryFiles;
   pClearDirectoryFiles ClearDirectoryFiles;
   pChangeDirectory ChangeDirectory;
   pIsFileDropped IsFileDropped;
   pGetDroppedFiles GetDroppedFiles;
   pClearDroppedFiles ClearDroppedFiles;
   pGetFileModTime GetFileModTime;
   pCompressData CompressData;
   pDecompressData DecompressData;
   pEncodeDataBase64 EncodeDataBase64;
   pDecodeDataBase64 DecodeDataBase64;
   pSaveStorageValue SaveStorageValue;
   pLoadStorageValue LoadStorageValue;
   pOpenURL OpenURL;
   pIsKeyPressed IsKeyPressed;
   pIsKeyDown IsKeyDown;
   pIsKeyReleased IsKeyReleased;
   pIsKeyUp IsKeyUp;
   pSetExitKey SetExitKey;
   pGetKeyPressed GetKeyPressed;
   pGetCharPressed GetCharPressed;
   pIsGamepadAvailable IsGamepadAvailable;
   pGetGamepadName GetGamepadName;
   pIsGamepadButtonPressed IsGamepadButtonPressed;
   pIsGamepadButtonDown IsGamepadButtonDown;
   pIsGamepadButtonReleased IsGamepadButtonReleased;
   pIsGamepadButtonUp IsGamepadButtonUp;
   pGetGamepadButtonPressed GetGamepadButtonPressed;
   pGetGamepadAxisCount GetGamepadAxisCount;
   pGetGamepadAxisMovement GetGamepadAxisMovement;
   pSetGamepadMappings SetGamepadMappings;
   pIsMouseButtonPressed IsMouseButtonPressed;
   pIsMouseButtonDown IsMouseButtonDown;
   pIsMouseButtonReleased IsMouseButtonReleased;
   pIsMouseButtonUp IsMouseButtonUp;
   pGetMouseX GetMouseX;
   pGetMouseY GetMouseY;
   pGetMousePosition GetMousePosition;
   pGetMouseDelta GetMouseDelta;
   pSetMousePosition SetMousePosition;
   pSetMouseOffset SetMouseOffset;
   pSetMouseScale SetMouseScale;
   pGetMouseWheelMove GetMouseWheelMove;
   pSetMouseCursor SetMouseCursor;
   pGetTouchX GetTouchX;
   pGetTouchY GetTouchY;
   pGetTouchPosition GetTouchPosition;
   pGetTouchPointId GetTouchPointId;
   pGetTouchPointCount GetTouchPointCount;
   pSetGesturesEnabled SetGesturesEnabled;
   pIsGestureDetected IsGestureDetected;
   pGetGestureDetected GetGestureDetected;
   pGetGestureHoldDuration GetGestureHoldDuration;
   pGetGestureDragVector GetGestureDragVector;
   pGetGestureDragAngle GetGestureDragAngle;
   pGetGesturePinchVector GetGesturePinchVector;
   pGetGesturePinchAngle GetGesturePinchAngle;
   pSetCameraMode SetCameraMode;
   pUpdateCamera UpdateCamera;
   pSetCameraPanControl SetCameraPanControl;
   pSetCameraAltControl SetCameraAltControl;
   pSetCameraSmoothZoomControl SetCameraSmoothZoomControl;
   pSetCameraMoveControls SetCameraMoveControls;
   pSetShapesTexture SetShapesTexture;
   pDrawPixel DrawPixel;
   pDrawPixelV DrawPixelV;
   pDrawLine DrawLine;
   pDrawLineV DrawLineV;
   pDrawLineEx DrawLineEx;
   pDrawLineBezier DrawLineBezier;
   pDrawLineBezierQuad DrawLineBezierQuad;
   pDrawLineBezierCubic DrawLineBezierCubic;
   pDrawLineStrip DrawLineStrip;
   pDrawCircle DrawCircle;
   pDrawCircleSector DrawCircleSector;
   pDrawCircleSectorLines DrawCircleSectorLines;
   pDrawCircleGradient DrawCircleGradient;
   pDrawCircleV DrawCircleV;
   pDrawCircleLines DrawCircleLines;
   pDrawEllipse DrawEllipse;
   pDrawEllipseLines DrawEllipseLines;
   pDrawRing DrawRing;
   pDrawRingLines DrawRingLines;
   pDrawRectangle DrawRectangle;
   pDrawRectangleV DrawRectangleV;
   pDrawRectangleRec DrawRectangleRec;
   pDrawRectanglePro DrawRectanglePro;
   pDrawRectangleGradientV DrawRectangleGradientV;
   pDrawRectangleGradientH DrawRectangleGradientH;
   pDrawRectangleGradientEx DrawRectangleGradientEx;
   pDrawRectangleLines DrawRectangleLines;
   pDrawRectangleLinesEx DrawRectangleLinesEx;
   pDrawRectangleRounded DrawRectangleRounded;
   pDrawRectangleRoundedLines DrawRectangleRoundedLines;
   pDrawTriangle DrawTriangle;
   pDrawTriangleLines DrawTriangleLines;
   pDrawTriangleFan DrawTriangleFan;
   pDrawTriangleStrip DrawTriangleStrip;
   pDrawPoly DrawPoly;
   pDrawPolyLines DrawPolyLines;
   pDrawPolyLinesEx DrawPolyLinesEx;
   pCheckCollisionRecs CheckCollisionRecs;
   pCheckCollisionCircles CheckCollisionCircles;
   pCheckCollisionCircleRec CheckCollisionCircleRec;
   pCheckCollisionPointRec CheckCollisionPointRec;
   pCheckCollisionPointCircle CheckCollisionPointCircle;
   pCheckCollisionPointTriangle CheckCollisionPointTriangle;
   pCheckCollisionLines CheckCollisionLines;
   pCheckCollisionPointLine CheckCollisionPointLine;
   pGetCollisionRec GetCollisionRec;
   pLoadImage LoadImage;
   pLoadImageRaw LoadImageRaw;
   pLoadImageAnim LoadImageAnim;
   pLoadImageFromMemory LoadImageFromMemory;
   pLoadImageFromTexture LoadImageFromTexture;
   pLoadImageFromScreen LoadImageFromScreen;
   pUnloadImage UnloadImage;
   pExportImage ExportImage;
   pExportImageAsCode ExportImageAsCode;
   pGenImageColor GenImageColor;
   pGenImageGradientV GenImageGradientV;
   pGenImageGradientH GenImageGradientH;
   pGenImageGradientRadial GenImageGradientRadial;
   pGenImageChecked GenImageChecked;
   pGenImageWhiteNoise GenImageWhiteNoise;
   pGenImageCellular GenImageCellular;
   pImageCopy ImageCopy;
   pImageFromImage ImageFromImage;
   pImageText ImageText;
   pImageTextEx ImageTextEx;
   pImageFormat ImageFormat;
   pImageToPOT ImageToPOT;
   pImageCrop ImageCrop;
   pImageAlphaCrop ImageAlphaCrop;
   pImageAlphaClear ImageAlphaClear;
   pImageAlphaMask ImageAlphaMask;
   pImageAlphaPremultiply ImageAlphaPremultiply;
   pImageResize ImageResize;
   pImageResizeNN ImageResizeNN;
   pImageResizeCanvas ImageResizeCanvas;
   pImageMipmaps ImageMipmaps;
   pImageDither ImageDither;
   pImageFlipVertical ImageFlipVertical;
   pImageFlipHorizontal ImageFlipHorizontal;
   pImageRotateCW ImageRotateCW;
   pImageRotateCCW ImageRotateCCW;
   pImageColorTint ImageColorTint;
   pImageColorInvert ImageColorInvert;
   pImageColorGrayscale ImageColorGrayscale;
   pImageColorContrast ImageColorContrast;
   pImageColorBrightness ImageColorBrightness;
   pImageColorReplace ImageColorReplace;
   pLoadImageColors LoadImageColors;
   pLoadImagePalette LoadImagePalette;
   pUnloadImageColors UnloadImageColors;
   pUnloadImagePalette UnloadImagePalette;
   pGetImageAlphaBorder GetImageAlphaBorder;
   pGetImageColor GetImageColor;
   pImageClearBackground ImageClearBackground;
   pImageDrawPixel ImageDrawPixel;
   pImageDrawPixelV ImageDrawPixelV;
   pImageDrawLine ImageDrawLine;
   pImageDrawLineV ImageDrawLineV;
   pImageDrawCircle ImageDrawCircle;
   pImageDrawCircleV ImageDrawCircleV;
   pImageDrawRectangle ImageDrawRectangle;
   pImageDrawRectangleV ImageDrawRectangleV;
   pImageDrawRectangleRec ImageDrawRectangleRec;
   pImageDrawRectangleLines ImageDrawRectangleLines;
   pImageDraw ImageDraw;
   pImageDrawText ImageDrawText;
   pImageDrawTextEx ImageDrawTextEx;
   pLoadTexture LoadTexture;
   pLoadTextureFromImage LoadTextureFromImage;
   pLoadTextureCubemap LoadTextureCubemap;
   pLoadRenderTexture LoadRenderTexture;
   pUnloadTexture UnloadTexture;
   pUnloadRenderTexture UnloadRenderTexture;
   pUpdateTexture UpdateTexture;
   pUpdateTextureRec UpdateTextureRec;
   pGenTextureMipmaps GenTextureMipmaps;
   pSetTextureFilter SetTextureFilter;
   pSetTextureWrap SetTextureWrap;
   pDrawTexture DrawTexture;
   pDrawTextureV DrawTextureV;
   pDrawTextureEx DrawTextureEx;
   pDrawTextureRec DrawTextureRec;
   pDrawTextureQuad DrawTextureQuad;
   pDrawTextureTiled DrawTextureTiled;
   pDrawTexturePro DrawTexturePro;
   pDrawTextureNPatch DrawTextureNPatch;
   pDrawTexturePoly DrawTexturePoly;
   pFade Fade;
   pColorToInt ColorToInt;
   pColorNormalize ColorNormalize;
   pColorFromNormalized ColorFromNormalized;
   pColorToHSV ColorToHSV;
   pColorFromHSV ColorFromHSV;
   pColorAlpha ColorAlpha;
   pColorAlphaBlend ColorAlphaBlend;
   pGetColor GetColor;
   pGetPixelColor GetPixelColor;
   pSetPixelColor SetPixelColor;
   pGetPixelDataSize GetPixelDataSize;
   pGetFontDefault GetFontDefault;
   pLoadFont LoadFont;
   pLoadFontEx LoadFontEx;
   pLoadFontFromImage LoadFontFromImage;
   pLoadFontFromMemory LoadFontFromMemory;
   pLoadFontData LoadFontData;
   pGenImageFontAtlas GenImageFontAtlas;
   pUnloadFontData UnloadFontData;
   pUnloadFont UnloadFont;
   pDrawFPS DrawFPS;
   pDrawText DrawText;
   pDrawTextEx DrawTextEx;
   pDrawTextPro DrawTextPro;
   pDrawTextCodepoint DrawTextCodepoint;
   pMeasureText MeasureText;
   pMeasureTextEx MeasureTextEx;
   pGetGlyphIndex GetGlyphIndex;
   pGetGlyphInfo GetGlyphInfo;
   pGetGlyphAtlasRec GetGlyphAtlasRec;
   pLoadCodepoints LoadCodepoints;
   pUnloadCodepoints UnloadCodepoints;
   pGetCodepointCount GetCodepointCount;
   pGetCodepoint GetCodepoint;
   pCodepointToUTF8 CodepointToUTF8;
   pTextCodepointsToUTF8 TextCodepointsToUTF8;
   pTextCopy TextCopy;
   pTextIsEqual TextIsEqual;
   pTextLength TextLength;
   pTextSubtext TextSubtext;
   pTextReplace TextReplace;
   pTextInsert TextInsert;
   pTextJoin TextJoin;
   pTextSplit TextSplit;
   pTextAppend TextAppend;
   pTextFindIndex TextFindIndex;
   pTextToUpper TextToUpper;
   pTextToLower TextToLower;
   pTextToPascal TextToPascal;
   pTextToInteger TextToInteger;
   pDrawLine3D DrawLine3D;
   pDrawPoint3D DrawPoint3D;
   pDrawCircle3D DrawCircle3D;
   pDrawTriangle3D DrawTriangle3D;
   pDrawTriangleStrip3D DrawTriangleStrip3D;
   pDrawCube DrawCube;
   pDrawCubeV DrawCubeV;
   pDrawCubeWires DrawCubeWires;
   pDrawCubeWiresV DrawCubeWiresV;
   pDrawCubeTexture DrawCubeTexture;
   pDrawCubeTextureRec DrawCubeTextureRec;
   pDrawSphere DrawSphere;
   pDrawSphereEx DrawSphereEx;
   pDrawSphereWires DrawSphereWires;
   pDrawCylinder DrawCylinder;
   pDrawCylinderEx DrawCylinderEx;
   pDrawCylinderWires DrawCylinderWires;
   pDrawCylinderWiresEx DrawCylinderWiresEx;
   pDrawPlane DrawPlane;
   pDrawRay DrawRay;
   pDrawGrid DrawGrid;
   pLoadModel LoadModel;
   pLoadModelFromMesh LoadModelFromMesh;
   pUnloadModel UnloadModel;
   pUnloadModelKeepMeshes UnloadModelKeepMeshes;
   pGetModelBoundingBox GetModelBoundingBox;
   pDrawModel DrawModel;
   pDrawModelEx DrawModelEx;
   pDrawModelWires DrawModelWires;
   pDrawModelWiresEx DrawModelWiresEx;
   pDrawBoundingBox DrawBoundingBox;
   pDrawBillboard DrawBillboard;
   pDrawBillboardRec DrawBillboardRec;
   pDrawBillboardPro DrawBillboardPro;
   pUploadMesh UploadMesh;
   pUpdateMeshBuffer UpdateMeshBuffer;
   pUnloadMesh UnloadMesh;
   pDrawMesh DrawMesh;
   pDrawMeshInstanced DrawMeshInstanced;
   pExportMesh ExportMesh;
   pGetMeshBoundingBox GetMeshBoundingBox;
   pGenMeshTangents GenMeshTangents;
   pGenMeshBinormals GenMeshBinormals;
   pGenMeshPoly GenMeshPoly;
   pGenMeshPlane GenMeshPlane;
   pGenMeshCube GenMeshCube;
   pGenMeshSphere GenMeshSphere;
   pGenMeshHemiSphere GenMeshHemiSphere;
   pGenMeshCylinder GenMeshCylinder;
   pGenMeshCone GenMeshCone;
   pGenMeshTorus GenMeshTorus;
   pGenMeshKnot GenMeshKnot;
   pGenMeshHeightmap GenMeshHeightmap;
   pGenMeshCubicmap GenMeshCubicmap;
   pLoadMaterials LoadMaterials;
   pLoadMaterialDefault LoadMaterialDefault;
   pUnloadMaterial UnloadMaterial;
   pSetMaterialTexture SetMaterialTexture;
   pSetModelMeshMaterial SetModelMeshMaterial;
   pLoadModelAnimations LoadModelAnimations;
   pUpdateModelAnimation UpdateModelAnimation;
   pUnloadModelAnimation UnloadModelAnimation;
   pUnloadModelAnimations UnloadModelAnimations;
   pIsModelAnimationValid IsModelAnimationValid;
   pCheckCollisionSpheres CheckCollisionSpheres;
   pCheckCollisionBoxes CheckCollisionBoxes;
   pCheckCollisionBoxSphere CheckCollisionBoxSphere;
   pGetRayCollisionSphere GetRayCollisionSphere;
   pGetRayCollisionBox GetRayCollisionBox;
   pGetRayCollisionModel GetRayCollisionModel;
   pGetRayCollisionMesh GetRayCollisionMesh;
   pGetRayCollisionTriangle GetRayCollisionTriangle;
   pGetRayCollisionQuad GetRayCollisionQuad;
   pInitAudioDevice InitAudioDevice;
   pCloseAudioDevice CloseAudioDevice;
   pIsAudioDeviceReady IsAudioDeviceReady;
   pSetMasterVolume SetMasterVolume;
   pLoadWave LoadWave;
   pLoadWaveFromMemory LoadWaveFromMemory;
   pLoadSound LoadSound;
   pLoadSoundFromWave LoadSoundFromWave;
   pUpdateSound UpdateSound;
   pUnloadWave UnloadWave;
   pUnloadSound UnloadSound;
   pExportWave ExportWave;
   pExportWaveAsCode ExportWaveAsCode;
   pPlaySound PlaySound;
   pStopSound StopSound;
   pPauseSound PauseSound;
   pResumeSound ResumeSound;
   pPlaySoundMulti PlaySoundMulti;
   pStopSoundMulti StopSoundMulti;
   pGetSoundsPlaying GetSoundsPlaying;
   pIsSoundPlaying IsSoundPlaying;
   pSetSoundVolume SetSoundVolume;
   pSetSoundPitch SetSoundPitch;
   pWaveFormat WaveFormat;
   pWaveCopy WaveCopy;
   pWaveCrop WaveCrop;
   pLoadWaveSamples LoadWaveSamples;
   pUnloadWaveSamples UnloadWaveSamples;
   pLoadMusicStream LoadMusicStream;
   pLoadMusicStreamFromMemory LoadMusicStreamFromMemory;
   pUnloadMusicStream UnloadMusicStream;
   pPlayMusicStream PlayMusicStream;
   pIsMusicStreamPlaying IsMusicStreamPlaying;
   pUpdateMusicStream UpdateMusicStream;
   pStopMusicStream StopMusicStream;
   pPauseMusicStream PauseMusicStream;
   pResumeMusicStream ResumeMusicStream;
   pSeekMusicStream SeekMusicStream;
   pSetMusicVolume SetMusicVolume;
   pSetMusicPitch SetMusicPitch;
   pGetMusicTimeLength GetMusicTimeLength;
   pGetMusicTimePlayed GetMusicTimePlayed;
   pLoadAudioStream LoadAudioStream;
   pUnloadAudioStream UnloadAudioStream;
   pUpdateAudioStream UpdateAudioStream;
   pIsAudioStreamProcessed IsAudioStreamProcessed;
   pPlayAudioStream PlayAudioStream;
   pPauseAudioStream PauseAudioStream;
   pResumeAudioStream ResumeAudioStream;
   pIsAudioStreamPlaying IsAudioStreamPlaying;
   pStopAudioStream StopAudioStream;
   pSetAudioStreamVolume SetAudioStreamVolume;
   pSetAudioStreamPitch SetAudioStreamPitch;
   pSetAudioStreamBufferSizeDefault SetAudioStreamBufferSizeDefault;
}
/**
 * Raylib binding.
 *
 * Automatically generated, do not modify
 */
private {
   SharedLib lib;
   RaylibSupport loadedVersion;
}

@nogc nothrow:

void unloadRaylib() {
   if (lib != invalidHandle) {
      lib.unload();
   }
}

RaylibSupport loadedRaylibVersion() @safe {
   return loadedVersion;
}

bool isRaylibLoaded() @safe {
   return lib != invalidHandle;
}

RaylibSupport loadRaylib() {
   version (Windows) {
      const(char)[][1] libNames = ["raylib.dll"];
   } else version (Posix) {
      const(char)[][3] libNames = [
         "libraylib.so",
         "/usr/local/lib/libraylib.so" //make install PLATFORM=PLATFORM_DESKTOP RAYLIB_LIBTYPE=SHARED
         , "/usr/lib/libraylib.so"
      ];
   } else {
      static assert(0, "bindbc-raylib is not yet supported on this platform");
   }

   RaylibSupport ret;
   foreach (name; libNames) {
      ret = loadRaylib(name.ptr);
      if (ret != RaylibSupport.noLibrary) {
         break;
      }
   }
   return ret;
}

RaylibSupport loadRaylib(const(char)* libName) {
   lib = load(libName);
   if (lib == invalidHandle) {
      return RaylibSupport.noLibrary;
   }

   auto errCount = errorCount();
   loadedVersion = RaylibSupport.badLibrary;


   lib.bindSymbol(cast(void**)&InitWindow, "InitWindow");
   lib.bindSymbol(cast(void**)&WindowShouldClose, "WindowShouldClose");
   lib.bindSymbol(cast(void**)&CloseWindow, "CloseWindow");
   lib.bindSymbol(cast(void**)&IsWindowReady, "IsWindowReady");
   lib.bindSymbol(cast(void**)&IsWindowFullscreen, "IsWindowFullscreen");
   lib.bindSymbol(cast(void**)&IsWindowHidden, "IsWindowHidden");
   lib.bindSymbol(cast(void**)&IsWindowMinimized, "IsWindowMinimized");
   lib.bindSymbol(cast(void**)&IsWindowMaximized, "IsWindowMaximized");
   lib.bindSymbol(cast(void**)&IsWindowFocused, "IsWindowFocused");
   lib.bindSymbol(cast(void**)&IsWindowResized, "IsWindowResized");
   lib.bindSymbol(cast(void**)&IsWindowState, "IsWindowState");
   lib.bindSymbol(cast(void**)&SetWindowState, "SetWindowState");
   lib.bindSymbol(cast(void**)&ClearWindowState, "ClearWindowState");
   lib.bindSymbol(cast(void**)&ToggleFullscreen, "ToggleFullscreen");
   lib.bindSymbol(cast(void**)&MaximizeWindow, "MaximizeWindow");
   lib.bindSymbol(cast(void**)&MinimizeWindow, "MinimizeWindow");
   lib.bindSymbol(cast(void**)&RestoreWindow, "RestoreWindow");
   lib.bindSymbol(cast(void**)&SetWindowIcon, "SetWindowIcon");
   lib.bindSymbol(cast(void**)&SetWindowTitle, "SetWindowTitle");
   lib.bindSymbol(cast(void**)&SetWindowPosition, "SetWindowPosition");
   lib.bindSymbol(cast(void**)&SetWindowMonitor, "SetWindowMonitor");
   lib.bindSymbol(cast(void**)&SetWindowMinSize, "SetWindowMinSize");
   lib.bindSymbol(cast(void**)&SetWindowSize, "SetWindowSize");
   lib.bindSymbol(cast(void**)&GetWindowHandle, "GetWindowHandle");
   lib.bindSymbol(cast(void**)&GetScreenWidth, "GetScreenWidth");
   lib.bindSymbol(cast(void**)&GetScreenHeight, "GetScreenHeight");
   lib.bindSymbol(cast(void**)&GetMonitorCount, "GetMonitorCount");
   lib.bindSymbol(cast(void**)&GetCurrentMonitor, "GetCurrentMonitor");
   lib.bindSymbol(cast(void**)&GetMonitorPosition, "GetMonitorPosition");
   lib.bindSymbol(cast(void**)&GetMonitorWidth, "GetMonitorWidth");
   lib.bindSymbol(cast(void**)&GetMonitorHeight, "GetMonitorHeight");
   lib.bindSymbol(cast(void**)&GetMonitorPhysicalWidth, "GetMonitorPhysicalWidth");
   lib.bindSymbol(cast(void**)&GetMonitorPhysicalHeight, "GetMonitorPhysicalHeight");
   lib.bindSymbol(cast(void**)&GetMonitorRefreshRate, "GetMonitorRefreshRate");
   lib.bindSymbol(cast(void**)&GetWindowPosition, "GetWindowPosition");
   lib.bindSymbol(cast(void**)&GetWindowScaleDPI, "GetWindowScaleDPI");
   lib.bindSymbol(cast(void**)&GetMonitorName, "GetMonitorName");
   lib.bindSymbol(cast(void**)&SetClipboardText, "SetClipboardText");
   lib.bindSymbol(cast(void**)&GetClipboardText, "GetClipboardText");
   lib.bindSymbol(cast(void**)&SwapScreenBuffer, "SwapScreenBuffer");
   lib.bindSymbol(cast(void**)&PollInputEvents, "PollInputEvents");
   lib.bindSymbol(cast(void**)&WaitTime, "WaitTime");
   lib.bindSymbol(cast(void**)&ShowCursor, "ShowCursor");
   lib.bindSymbol(cast(void**)&HideCursor, "HideCursor");
   lib.bindSymbol(cast(void**)&IsCursorHidden, "IsCursorHidden");
   lib.bindSymbol(cast(void**)&EnableCursor, "EnableCursor");
   lib.bindSymbol(cast(void**)&DisableCursor, "DisableCursor");
   lib.bindSymbol(cast(void**)&IsCursorOnScreen, "IsCursorOnScreen");
   lib.bindSymbol(cast(void**)&ClearBackground, "ClearBackground");
   lib.bindSymbol(cast(void**)&BeginDrawing, "BeginDrawing");
   lib.bindSymbol(cast(void**)&EndDrawing, "EndDrawing");
   lib.bindSymbol(cast(void**)&BeginMode2D, "BeginMode2D");
   lib.bindSymbol(cast(void**)&EndMode2D, "EndMode2D");
   lib.bindSymbol(cast(void**)&BeginMode3D, "BeginMode3D");
   lib.bindSymbol(cast(void**)&EndMode3D, "EndMode3D");
   lib.bindSymbol(cast(void**)&BeginTextureMode, "BeginTextureMode");
   lib.bindSymbol(cast(void**)&EndTextureMode, "EndTextureMode");
   lib.bindSymbol(cast(void**)&BeginShaderMode, "BeginShaderMode");
   lib.bindSymbol(cast(void**)&EndShaderMode, "EndShaderMode");
   lib.bindSymbol(cast(void**)&BeginBlendMode, "BeginBlendMode");
   lib.bindSymbol(cast(void**)&EndBlendMode, "EndBlendMode");
   lib.bindSymbol(cast(void**)&BeginScissorMode, "BeginScissorMode");
   lib.bindSymbol(cast(void**)&EndScissorMode, "EndScissorMode");
   lib.bindSymbol(cast(void**)&BeginVrStereoMode, "BeginVrStereoMode");
   lib.bindSymbol(cast(void**)&EndVrStereoMode, "EndVrStereoMode");
   lib.bindSymbol(cast(void**)&LoadVrStereoConfig, "LoadVrStereoConfig");
   lib.bindSymbol(cast(void**)&UnloadVrStereoConfig, "UnloadVrStereoConfig");
   lib.bindSymbol(cast(void**)&LoadShader, "LoadShader");
   lib.bindSymbol(cast(void**)&LoadShaderFromMemory, "LoadShaderFromMemory");
   lib.bindSymbol(cast(void**)&GetShaderLocation, "GetShaderLocation");
   lib.bindSymbol(cast(void**)&GetShaderLocationAttrib, "GetShaderLocationAttrib");
   lib.bindSymbol(cast(void**)&SetShaderValue, "SetShaderValue");
   lib.bindSymbol(cast(void**)&SetShaderValueV, "SetShaderValueV");
   lib.bindSymbol(cast(void**)&SetShaderValueMatrix, "SetShaderValueMatrix");
   lib.bindSymbol(cast(void**)&SetShaderValueTexture, "SetShaderValueTexture");
   lib.bindSymbol(cast(void**)&UnloadShader, "UnloadShader");
   lib.bindSymbol(cast(void**)&GetMouseRay, "GetMouseRay");
   lib.bindSymbol(cast(void**)&GetCameraMatrix, "GetCameraMatrix");
   lib.bindSymbol(cast(void**)&GetCameraMatrix2D, "GetCameraMatrix2D");
   lib.bindSymbol(cast(void**)&GetWorldToScreen, "GetWorldToScreen");
   lib.bindSymbol(cast(void**)&GetWorldToScreenEx, "GetWorldToScreenEx");
   lib.bindSymbol(cast(void**)&GetWorldToScreen2D, "GetWorldToScreen2D");
   lib.bindSymbol(cast(void**)&GetScreenToWorld2D, "GetScreenToWorld2D");
   lib.bindSymbol(cast(void**)&SetTargetFPS, "SetTargetFPS");
   lib.bindSymbol(cast(void**)&GetFPS, "GetFPS");
   lib.bindSymbol(cast(void**)&GetFrameTime, "GetFrameTime");
   lib.bindSymbol(cast(void**)&GetTime, "GetTime");
   lib.bindSymbol(cast(void**)&GetRandomValue, "GetRandomValue");
   lib.bindSymbol(cast(void**)&SetRandomSeed, "SetRandomSeed");
   lib.bindSymbol(cast(void**)&TakeScreenshot, "TakeScreenshot");
   lib.bindSymbol(cast(void**)&SetConfigFlags, "SetConfigFlags");
   lib.bindSymbol(cast(void**)&SetTraceLogLevel, "SetTraceLogLevel");
   lib.bindSymbol(cast(void**)&MemAlloc, "MemAlloc");
   lib.bindSymbol(cast(void**)&MemRealloc, "MemRealloc");
   lib.bindSymbol(cast(void**)&MemFree, "MemFree");
   lib.bindSymbol(cast(void**)&LoadFileData, "LoadFileData");
   lib.bindSymbol(cast(void**)&UnloadFileData, "UnloadFileData");
   lib.bindSymbol(cast(void**)&SaveFileData, "SaveFileData");
   lib.bindSymbol(cast(void**)&LoadFileText, "LoadFileText");
   lib.bindSymbol(cast(void**)&UnloadFileText, "UnloadFileText");
   lib.bindSymbol(cast(void**)&SaveFileText, "SaveFileText");
   lib.bindSymbol(cast(void**)&FileExists, "FileExists");
   lib.bindSymbol(cast(void**)&DirectoryExists, "DirectoryExists");
   lib.bindSymbol(cast(void**)&IsFileExtension, "IsFileExtension");
   lib.bindSymbol(cast(void**)&GetFileExtension, "GetFileExtension");
   lib.bindSymbol(cast(void**)&GetFileName, "GetFileName");
   lib.bindSymbol(cast(void**)&GetFileNameWithoutExt, "GetFileNameWithoutExt");
   lib.bindSymbol(cast(void**)&GetDirectoryPath, "GetDirectoryPath");
   lib.bindSymbol(cast(void**)&GetPrevDirectoryPath, "GetPrevDirectoryPath");
   lib.bindSymbol(cast(void**)&GetWorkingDirectory, "GetWorkingDirectory");
   lib.bindSymbol(cast(void**)&GetDirectoryFiles, "GetDirectoryFiles");
   lib.bindSymbol(cast(void**)&ClearDirectoryFiles, "ClearDirectoryFiles");
   lib.bindSymbol(cast(void**)&ChangeDirectory, "ChangeDirectory");
   lib.bindSymbol(cast(void**)&IsFileDropped, "IsFileDropped");
   lib.bindSymbol(cast(void**)&GetDroppedFiles, "GetDroppedFiles");
   lib.bindSymbol(cast(void**)&ClearDroppedFiles, "ClearDroppedFiles");
   lib.bindSymbol(cast(void**)&GetFileModTime, "GetFileModTime");
   lib.bindSymbol(cast(void**)&CompressData, "CompressData");
   lib.bindSymbol(cast(void**)&DecompressData, "DecompressData");
   lib.bindSymbol(cast(void**)&EncodeDataBase64, "EncodeDataBase64");
   lib.bindSymbol(cast(void**)&DecodeDataBase64, "DecodeDataBase64");
   lib.bindSymbol(cast(void**)&SaveStorageValue, "SaveStorageValue");
   lib.bindSymbol(cast(void**)&LoadStorageValue, "LoadStorageValue");
   lib.bindSymbol(cast(void**)&OpenURL, "OpenURL");
   lib.bindSymbol(cast(void**)&IsKeyPressed, "IsKeyPressed");
   lib.bindSymbol(cast(void**)&IsKeyDown, "IsKeyDown");
   lib.bindSymbol(cast(void**)&IsKeyReleased, "IsKeyReleased");
   lib.bindSymbol(cast(void**)&IsKeyUp, "IsKeyUp");
   lib.bindSymbol(cast(void**)&SetExitKey, "SetExitKey");
   lib.bindSymbol(cast(void**)&GetKeyPressed, "GetKeyPressed");
   lib.bindSymbol(cast(void**)&GetCharPressed, "GetCharPressed");
   lib.bindSymbol(cast(void**)&IsGamepadAvailable, "IsGamepadAvailable");
   lib.bindSymbol(cast(void**)&GetGamepadName, "GetGamepadName");
   lib.bindSymbol(cast(void**)&IsGamepadButtonPressed, "IsGamepadButtonPressed");
   lib.bindSymbol(cast(void**)&IsGamepadButtonDown, "IsGamepadButtonDown");
   lib.bindSymbol(cast(void**)&IsGamepadButtonReleased, "IsGamepadButtonReleased");
   lib.bindSymbol(cast(void**)&IsGamepadButtonUp, "IsGamepadButtonUp");
   lib.bindSymbol(cast(void**)&GetGamepadButtonPressed, "GetGamepadButtonPressed");
   lib.bindSymbol(cast(void**)&GetGamepadAxisCount, "GetGamepadAxisCount");
   lib.bindSymbol(cast(void**)&GetGamepadAxisMovement, "GetGamepadAxisMovement");
   lib.bindSymbol(cast(void**)&SetGamepadMappings, "SetGamepadMappings");
   lib.bindSymbol(cast(void**)&IsMouseButtonPressed, "IsMouseButtonPressed");
   lib.bindSymbol(cast(void**)&IsMouseButtonDown, "IsMouseButtonDown");
   lib.bindSymbol(cast(void**)&IsMouseButtonReleased, "IsMouseButtonReleased");
   lib.bindSymbol(cast(void**)&IsMouseButtonUp, "IsMouseButtonUp");
   lib.bindSymbol(cast(void**)&GetMouseX, "GetMouseX");
   lib.bindSymbol(cast(void**)&GetMouseY, "GetMouseY");
   lib.bindSymbol(cast(void**)&GetMousePosition, "GetMousePosition");
   lib.bindSymbol(cast(void**)&GetMouseDelta, "GetMouseDelta");
   lib.bindSymbol(cast(void**)&SetMousePosition, "SetMousePosition");
   lib.bindSymbol(cast(void**)&SetMouseOffset, "SetMouseOffset");
   lib.bindSymbol(cast(void**)&SetMouseScale, "SetMouseScale");
   lib.bindSymbol(cast(void**)&GetMouseWheelMove, "GetMouseWheelMove");
   lib.bindSymbol(cast(void**)&SetMouseCursor, "SetMouseCursor");
   lib.bindSymbol(cast(void**)&GetTouchX, "GetTouchX");
   lib.bindSymbol(cast(void**)&GetTouchY, "GetTouchY");
   lib.bindSymbol(cast(void**)&GetTouchPosition, "GetTouchPosition");
   lib.bindSymbol(cast(void**)&GetTouchPointId, "GetTouchPointId");
   lib.bindSymbol(cast(void**)&GetTouchPointCount, "GetTouchPointCount");
   lib.bindSymbol(cast(void**)&SetGesturesEnabled, "SetGesturesEnabled");
   lib.bindSymbol(cast(void**)&IsGestureDetected, "IsGestureDetected");
   lib.bindSymbol(cast(void**)&GetGestureDetected, "GetGestureDetected");
   lib.bindSymbol(cast(void**)&GetGestureHoldDuration, "GetGestureHoldDuration");
   lib.bindSymbol(cast(void**)&GetGestureDragVector, "GetGestureDragVector");
   lib.bindSymbol(cast(void**)&GetGestureDragAngle, "GetGestureDragAngle");
   lib.bindSymbol(cast(void**)&GetGesturePinchVector, "GetGesturePinchVector");
   lib.bindSymbol(cast(void**)&GetGesturePinchAngle, "GetGesturePinchAngle");
   lib.bindSymbol(cast(void**)&SetCameraMode, "SetCameraMode");
   lib.bindSymbol(cast(void**)&UpdateCamera, "UpdateCamera");
   lib.bindSymbol(cast(void**)&SetCameraPanControl, "SetCameraPanControl");
   lib.bindSymbol(cast(void**)&SetCameraAltControl, "SetCameraAltControl");
   lib.bindSymbol(cast(void**)&SetCameraSmoothZoomControl, "SetCameraSmoothZoomControl");
   lib.bindSymbol(cast(void**)&SetCameraMoveControls, "SetCameraMoveControls");
   lib.bindSymbol(cast(void**)&SetShapesTexture, "SetShapesTexture");
   lib.bindSymbol(cast(void**)&DrawPixel, "DrawPixel");
   lib.bindSymbol(cast(void**)&DrawPixelV, "DrawPixelV");
   lib.bindSymbol(cast(void**)&DrawLine, "DrawLine");
   lib.bindSymbol(cast(void**)&DrawLineV, "DrawLineV");
   lib.bindSymbol(cast(void**)&DrawLineEx, "DrawLineEx");
   lib.bindSymbol(cast(void**)&DrawLineBezier, "DrawLineBezier");
   lib.bindSymbol(cast(void**)&DrawLineBezierQuad, "DrawLineBezierQuad");
   lib.bindSymbol(cast(void**)&DrawLineBezierCubic, "DrawLineBezierCubic");
   lib.bindSymbol(cast(void**)&DrawLineStrip, "DrawLineStrip");
   lib.bindSymbol(cast(void**)&DrawCircle, "DrawCircle");
   lib.bindSymbol(cast(void**)&DrawCircleSector, "DrawCircleSector");
   lib.bindSymbol(cast(void**)&DrawCircleSectorLines, "DrawCircleSectorLines");
   lib.bindSymbol(cast(void**)&DrawCircleGradient, "DrawCircleGradient");
   lib.bindSymbol(cast(void**)&DrawCircleV, "DrawCircleV");
   lib.bindSymbol(cast(void**)&DrawCircleLines, "DrawCircleLines");
   lib.bindSymbol(cast(void**)&DrawEllipse, "DrawEllipse");
   lib.bindSymbol(cast(void**)&DrawEllipseLines, "DrawEllipseLines");
   lib.bindSymbol(cast(void**)&DrawRing, "DrawRing");
   lib.bindSymbol(cast(void**)&DrawRingLines, "DrawRingLines");
   lib.bindSymbol(cast(void**)&DrawRectangle, "DrawRectangle");
   lib.bindSymbol(cast(void**)&DrawRectangleV, "DrawRectangleV");
   lib.bindSymbol(cast(void**)&DrawRectangleRec, "DrawRectangleRec");
   lib.bindSymbol(cast(void**)&DrawRectanglePro, "DrawRectanglePro");
   lib.bindSymbol(cast(void**)&DrawRectangleGradientV, "DrawRectangleGradientV");
   lib.bindSymbol(cast(void**)&DrawRectangleGradientH, "DrawRectangleGradientH");
   lib.bindSymbol(cast(void**)&DrawRectangleGradientEx, "DrawRectangleGradientEx");
   lib.bindSymbol(cast(void**)&DrawRectangleLines, "DrawRectangleLines");
   lib.bindSymbol(cast(void**)&DrawRectangleLinesEx, "DrawRectangleLinesEx");
   lib.bindSymbol(cast(void**)&DrawRectangleRounded, "DrawRectangleRounded");
   lib.bindSymbol(cast(void**)&DrawRectangleRoundedLines, "DrawRectangleRoundedLines");
   lib.bindSymbol(cast(void**)&DrawTriangle, "DrawTriangle");
   lib.bindSymbol(cast(void**)&DrawTriangleLines, "DrawTriangleLines");
   lib.bindSymbol(cast(void**)&DrawTriangleFan, "DrawTriangleFan");
   lib.bindSymbol(cast(void**)&DrawTriangleStrip, "DrawTriangleStrip");
   lib.bindSymbol(cast(void**)&DrawPoly, "DrawPoly");
   lib.bindSymbol(cast(void**)&DrawPolyLines, "DrawPolyLines");
   lib.bindSymbol(cast(void**)&DrawPolyLinesEx, "DrawPolyLinesEx");
   lib.bindSymbol(cast(void**)&CheckCollisionRecs, "CheckCollisionRecs");
   lib.bindSymbol(cast(void**)&CheckCollisionCircles, "CheckCollisionCircles");
   lib.bindSymbol(cast(void**)&CheckCollisionCircleRec, "CheckCollisionCircleRec");
   lib.bindSymbol(cast(void**)&CheckCollisionPointRec, "CheckCollisionPointRec");
   lib.bindSymbol(cast(void**)&CheckCollisionPointCircle, "CheckCollisionPointCircle");
   lib.bindSymbol(cast(void**)&CheckCollisionPointTriangle, "CheckCollisionPointTriangle");
   lib.bindSymbol(cast(void**)&CheckCollisionLines, "CheckCollisionLines");
   lib.bindSymbol(cast(void**)&CheckCollisionPointLine, "CheckCollisionPointLine");
   lib.bindSymbol(cast(void**)&GetCollisionRec, "GetCollisionRec");
   lib.bindSymbol(cast(void**)&LoadImage, "LoadImage");
   lib.bindSymbol(cast(void**)&LoadImageRaw, "LoadImageRaw");
   lib.bindSymbol(cast(void**)&LoadImageAnim, "LoadImageAnim");
   lib.bindSymbol(cast(void**)&LoadImageFromMemory, "LoadImageFromMemory");
   lib.bindSymbol(cast(void**)&LoadImageFromTexture, "LoadImageFromTexture");
   lib.bindSymbol(cast(void**)&LoadImageFromScreen, "LoadImageFromScreen");
   lib.bindSymbol(cast(void**)&UnloadImage, "UnloadImage");
   lib.bindSymbol(cast(void**)&ExportImage, "ExportImage");
   lib.bindSymbol(cast(void**)&ExportImageAsCode, "ExportImageAsCode");
   lib.bindSymbol(cast(void**)&GenImageColor, "GenImageColor");
   lib.bindSymbol(cast(void**)&GenImageGradientV, "GenImageGradientV");
   lib.bindSymbol(cast(void**)&GenImageGradientH, "GenImageGradientH");
   lib.bindSymbol(cast(void**)&GenImageGradientRadial, "GenImageGradientRadial");
   lib.bindSymbol(cast(void**)&GenImageChecked, "GenImageChecked");
   lib.bindSymbol(cast(void**)&GenImageWhiteNoise, "GenImageWhiteNoise");
   lib.bindSymbol(cast(void**)&GenImageCellular, "GenImageCellular");
   lib.bindSymbol(cast(void**)&ImageCopy, "ImageCopy");
   lib.bindSymbol(cast(void**)&ImageFromImage, "ImageFromImage");
   lib.bindSymbol(cast(void**)&ImageText, "ImageText");
   lib.bindSymbol(cast(void**)&ImageTextEx, "ImageTextEx");
   lib.bindSymbol(cast(void**)&ImageFormat, "ImageFormat");
   lib.bindSymbol(cast(void**)&ImageToPOT, "ImageToPOT");
   lib.bindSymbol(cast(void**)&ImageCrop, "ImageCrop");
   lib.bindSymbol(cast(void**)&ImageAlphaCrop, "ImageAlphaCrop");
   lib.bindSymbol(cast(void**)&ImageAlphaClear, "ImageAlphaClear");
   lib.bindSymbol(cast(void**)&ImageAlphaMask, "ImageAlphaMask");
   lib.bindSymbol(cast(void**)&ImageAlphaPremultiply, "ImageAlphaPremultiply");
   lib.bindSymbol(cast(void**)&ImageResize, "ImageResize");
   lib.bindSymbol(cast(void**)&ImageResizeNN, "ImageResizeNN");
   lib.bindSymbol(cast(void**)&ImageResizeCanvas, "ImageResizeCanvas");
   lib.bindSymbol(cast(void**)&ImageMipmaps, "ImageMipmaps");
   lib.bindSymbol(cast(void**)&ImageDither, "ImageDither");
   lib.bindSymbol(cast(void**)&ImageFlipVertical, "ImageFlipVertical");
   lib.bindSymbol(cast(void**)&ImageFlipHorizontal, "ImageFlipHorizontal");
   lib.bindSymbol(cast(void**)&ImageRotateCW, "ImageRotateCW");
   lib.bindSymbol(cast(void**)&ImageRotateCCW, "ImageRotateCCW");
   lib.bindSymbol(cast(void**)&ImageColorTint, "ImageColorTint");
   lib.bindSymbol(cast(void**)&ImageColorInvert, "ImageColorInvert");
   lib.bindSymbol(cast(void**)&ImageColorGrayscale, "ImageColorGrayscale");
   lib.bindSymbol(cast(void**)&ImageColorContrast, "ImageColorContrast");
   lib.bindSymbol(cast(void**)&ImageColorBrightness, "ImageColorBrightness");
   lib.bindSymbol(cast(void**)&ImageColorReplace, "ImageColorReplace");
   lib.bindSymbol(cast(void**)&LoadImageColors, "LoadImageColors");
   lib.bindSymbol(cast(void**)&LoadImagePalette, "LoadImagePalette");
   lib.bindSymbol(cast(void**)&UnloadImageColors, "UnloadImageColors");
   lib.bindSymbol(cast(void**)&UnloadImagePalette, "UnloadImagePalette");
   lib.bindSymbol(cast(void**)&GetImageAlphaBorder, "GetImageAlphaBorder");
   lib.bindSymbol(cast(void**)&GetImageColor, "GetImageColor");
   lib.bindSymbol(cast(void**)&ImageClearBackground, "ImageClearBackground");
   lib.bindSymbol(cast(void**)&ImageDrawPixel, "ImageDrawPixel");
   lib.bindSymbol(cast(void**)&ImageDrawPixelV, "ImageDrawPixelV");
   lib.bindSymbol(cast(void**)&ImageDrawLine, "ImageDrawLine");
   lib.bindSymbol(cast(void**)&ImageDrawLineV, "ImageDrawLineV");
   lib.bindSymbol(cast(void**)&ImageDrawCircle, "ImageDrawCircle");
   lib.bindSymbol(cast(void**)&ImageDrawCircleV, "ImageDrawCircleV");
   lib.bindSymbol(cast(void**)&ImageDrawRectangle, "ImageDrawRectangle");
   lib.bindSymbol(cast(void**)&ImageDrawRectangleV, "ImageDrawRectangleV");
   lib.bindSymbol(cast(void**)&ImageDrawRectangleRec, "ImageDrawRectangleRec");
   lib.bindSymbol(cast(void**)&ImageDrawRectangleLines, "ImageDrawRectangleLines");
   lib.bindSymbol(cast(void**)&ImageDraw, "ImageDraw");
   lib.bindSymbol(cast(void**)&ImageDrawText, "ImageDrawText");
   lib.bindSymbol(cast(void**)&ImageDrawTextEx, "ImageDrawTextEx");
   lib.bindSymbol(cast(void**)&LoadTexture, "LoadTexture");
   lib.bindSymbol(cast(void**)&LoadTextureFromImage, "LoadTextureFromImage");
   lib.bindSymbol(cast(void**)&LoadTextureCubemap, "LoadTextureCubemap");
   lib.bindSymbol(cast(void**)&LoadRenderTexture, "LoadRenderTexture");
   lib.bindSymbol(cast(void**)&UnloadTexture, "UnloadTexture");
   lib.bindSymbol(cast(void**)&UnloadRenderTexture, "UnloadRenderTexture");
   lib.bindSymbol(cast(void**)&UpdateTexture, "UpdateTexture");
   lib.bindSymbol(cast(void**)&UpdateTextureRec, "UpdateTextureRec");
   lib.bindSymbol(cast(void**)&GenTextureMipmaps, "GenTextureMipmaps");
   lib.bindSymbol(cast(void**)&SetTextureFilter, "SetTextureFilter");
   lib.bindSymbol(cast(void**)&SetTextureWrap, "SetTextureWrap");
   lib.bindSymbol(cast(void**)&DrawTexture, "DrawTexture");
   lib.bindSymbol(cast(void**)&DrawTextureV, "DrawTextureV");
   lib.bindSymbol(cast(void**)&DrawTextureEx, "DrawTextureEx");
   lib.bindSymbol(cast(void**)&DrawTextureRec, "DrawTextureRec");
   lib.bindSymbol(cast(void**)&DrawTextureQuad, "DrawTextureQuad");
   lib.bindSymbol(cast(void**)&DrawTextureTiled, "DrawTextureTiled");
   lib.bindSymbol(cast(void**)&DrawTexturePro, "DrawTexturePro");
   lib.bindSymbol(cast(void**)&DrawTextureNPatch, "DrawTextureNPatch");
   lib.bindSymbol(cast(void**)&DrawTexturePoly, "DrawTexturePoly");
   lib.bindSymbol(cast(void**)&Fade, "Fade");
   lib.bindSymbol(cast(void**)&ColorToInt, "ColorToInt");
   lib.bindSymbol(cast(void**)&ColorNormalize, "ColorNormalize");
   lib.bindSymbol(cast(void**)&ColorFromNormalized, "ColorFromNormalized");
   lib.bindSymbol(cast(void**)&ColorToHSV, "ColorToHSV");
   lib.bindSymbol(cast(void**)&ColorFromHSV, "ColorFromHSV");
   lib.bindSymbol(cast(void**)&ColorAlpha, "ColorAlpha");
   lib.bindSymbol(cast(void**)&ColorAlphaBlend, "ColorAlphaBlend");
   lib.bindSymbol(cast(void**)&GetColor, "GetColor");
   lib.bindSymbol(cast(void**)&GetPixelColor, "GetPixelColor");
   lib.bindSymbol(cast(void**)&SetPixelColor, "SetPixelColor");
   lib.bindSymbol(cast(void**)&GetPixelDataSize, "GetPixelDataSize");
   lib.bindSymbol(cast(void**)&GetFontDefault, "GetFontDefault");
   lib.bindSymbol(cast(void**)&LoadFont, "LoadFont");
   lib.bindSymbol(cast(void**)&LoadFontEx, "LoadFontEx");
   lib.bindSymbol(cast(void**)&LoadFontFromImage, "LoadFontFromImage");
   lib.bindSymbol(cast(void**)&LoadFontFromMemory, "LoadFontFromMemory");
   lib.bindSymbol(cast(void**)&LoadFontData, "LoadFontData");
   lib.bindSymbol(cast(void**)&GenImageFontAtlas, "GenImageFontAtlas");
   lib.bindSymbol(cast(void**)&UnloadFontData, "UnloadFontData");
   lib.bindSymbol(cast(void**)&UnloadFont, "UnloadFont");
   lib.bindSymbol(cast(void**)&DrawFPS, "DrawFPS");
   lib.bindSymbol(cast(void**)&DrawText, "DrawText");
   lib.bindSymbol(cast(void**)&DrawTextEx, "DrawTextEx");
   lib.bindSymbol(cast(void**)&DrawTextPro, "DrawTextPro");
   lib.bindSymbol(cast(void**)&DrawTextCodepoint, "DrawTextCodepoint");
   lib.bindSymbol(cast(void**)&MeasureText, "MeasureText");
   lib.bindSymbol(cast(void**)&MeasureTextEx, "MeasureTextEx");
   lib.bindSymbol(cast(void**)&GetGlyphIndex, "GetGlyphIndex");
   lib.bindSymbol(cast(void**)&GetGlyphInfo, "GetGlyphInfo");
   lib.bindSymbol(cast(void**)&GetGlyphAtlasRec, "GetGlyphAtlasRec");
   lib.bindSymbol(cast(void**)&LoadCodepoints, "LoadCodepoints");
   lib.bindSymbol(cast(void**)&UnloadCodepoints, "UnloadCodepoints");
   lib.bindSymbol(cast(void**)&GetCodepointCount, "GetCodepointCount");
   lib.bindSymbol(cast(void**)&GetCodepoint, "GetCodepoint");
   lib.bindSymbol(cast(void**)&CodepointToUTF8, "CodepointToUTF8");
   lib.bindSymbol(cast(void**)&TextCodepointsToUTF8, "TextCodepointsToUTF8");
   lib.bindSymbol(cast(void**)&TextCopy, "TextCopy");
   lib.bindSymbol(cast(void**)&TextIsEqual, "TextIsEqual");
   lib.bindSymbol(cast(void**)&TextLength, "TextLength");
   lib.bindSymbol(cast(void**)&TextSubtext, "TextSubtext");
   lib.bindSymbol(cast(void**)&TextReplace, "TextReplace");
   lib.bindSymbol(cast(void**)&TextInsert, "TextInsert");
   lib.bindSymbol(cast(void**)&TextJoin, "TextJoin");
   lib.bindSymbol(cast(void**)&TextSplit, "TextSplit");
   lib.bindSymbol(cast(void**)&TextAppend, "TextAppend");
   lib.bindSymbol(cast(void**)&TextFindIndex, "TextFindIndex");
   lib.bindSymbol(cast(void**)&TextToUpper, "TextToUpper");
   lib.bindSymbol(cast(void**)&TextToLower, "TextToLower");
   lib.bindSymbol(cast(void**)&TextToPascal, "TextToPascal");
   lib.bindSymbol(cast(void**)&TextToInteger, "TextToInteger");
   lib.bindSymbol(cast(void**)&DrawLine3D, "DrawLine3D");
   lib.bindSymbol(cast(void**)&DrawPoint3D, "DrawPoint3D");
   lib.bindSymbol(cast(void**)&DrawCircle3D, "DrawCircle3D");
   lib.bindSymbol(cast(void**)&DrawTriangle3D, "DrawTriangle3D");
   lib.bindSymbol(cast(void**)&DrawTriangleStrip3D, "DrawTriangleStrip3D");
   lib.bindSymbol(cast(void**)&DrawCube, "DrawCube");
   lib.bindSymbol(cast(void**)&DrawCubeV, "DrawCubeV");
   lib.bindSymbol(cast(void**)&DrawCubeWires, "DrawCubeWires");
   lib.bindSymbol(cast(void**)&DrawCubeWiresV, "DrawCubeWiresV");
   lib.bindSymbol(cast(void**)&DrawCubeTexture, "DrawCubeTexture");
   lib.bindSymbol(cast(void**)&DrawCubeTextureRec, "DrawCubeTextureRec");
   lib.bindSymbol(cast(void**)&DrawSphere, "DrawSphere");
   lib.bindSymbol(cast(void**)&DrawSphereEx, "DrawSphereEx");
   lib.bindSymbol(cast(void**)&DrawSphereWires, "DrawSphereWires");
   lib.bindSymbol(cast(void**)&DrawCylinder, "DrawCylinder");
   lib.bindSymbol(cast(void**)&DrawCylinderEx, "DrawCylinderEx");
   lib.bindSymbol(cast(void**)&DrawCylinderWires, "DrawCylinderWires");
   lib.bindSymbol(cast(void**)&DrawCylinderWiresEx, "DrawCylinderWiresEx");
   lib.bindSymbol(cast(void**)&DrawPlane, "DrawPlane");
   lib.bindSymbol(cast(void**)&DrawRay, "DrawRay");
   lib.bindSymbol(cast(void**)&DrawGrid, "DrawGrid");
   lib.bindSymbol(cast(void**)&LoadModel, "LoadModel");
   lib.bindSymbol(cast(void**)&LoadModelFromMesh, "LoadModelFromMesh");
   lib.bindSymbol(cast(void**)&UnloadModel, "UnloadModel");
   lib.bindSymbol(cast(void**)&UnloadModelKeepMeshes, "UnloadModelKeepMeshes");
   lib.bindSymbol(cast(void**)&GetModelBoundingBox, "GetModelBoundingBox");
   lib.bindSymbol(cast(void**)&DrawModel, "DrawModel");
   lib.bindSymbol(cast(void**)&DrawModelEx, "DrawModelEx");
   lib.bindSymbol(cast(void**)&DrawModelWires, "DrawModelWires");
   lib.bindSymbol(cast(void**)&DrawModelWiresEx, "DrawModelWiresEx");
   lib.bindSymbol(cast(void**)&DrawBoundingBox, "DrawBoundingBox");
   lib.bindSymbol(cast(void**)&DrawBillboard, "DrawBillboard");
   lib.bindSymbol(cast(void**)&DrawBillboardRec, "DrawBillboardRec");
   lib.bindSymbol(cast(void**)&DrawBillboardPro, "DrawBillboardPro");
   lib.bindSymbol(cast(void**)&UploadMesh, "UploadMesh");
   lib.bindSymbol(cast(void**)&UpdateMeshBuffer, "UpdateMeshBuffer");
   lib.bindSymbol(cast(void**)&UnloadMesh, "UnloadMesh");
   lib.bindSymbol(cast(void**)&DrawMesh, "DrawMesh");
   lib.bindSymbol(cast(void**)&DrawMeshInstanced, "DrawMeshInstanced");
   lib.bindSymbol(cast(void**)&ExportMesh, "ExportMesh");
   lib.bindSymbol(cast(void**)&GetMeshBoundingBox, "GetMeshBoundingBox");
   lib.bindSymbol(cast(void**)&GenMeshTangents, "GenMeshTangents");
   lib.bindSymbol(cast(void**)&GenMeshBinormals, "GenMeshBinormals");
   lib.bindSymbol(cast(void**)&GenMeshPoly, "GenMeshPoly");
   lib.bindSymbol(cast(void**)&GenMeshPlane, "GenMeshPlane");
   lib.bindSymbol(cast(void**)&GenMeshCube, "GenMeshCube");
   lib.bindSymbol(cast(void**)&GenMeshSphere, "GenMeshSphere");
   lib.bindSymbol(cast(void**)&GenMeshHemiSphere, "GenMeshHemiSphere");
   lib.bindSymbol(cast(void**)&GenMeshCylinder, "GenMeshCylinder");
   lib.bindSymbol(cast(void**)&GenMeshCone, "GenMeshCone");
   lib.bindSymbol(cast(void**)&GenMeshTorus, "GenMeshTorus");
   lib.bindSymbol(cast(void**)&GenMeshKnot, "GenMeshKnot");
   lib.bindSymbol(cast(void**)&GenMeshHeightmap, "GenMeshHeightmap");
   lib.bindSymbol(cast(void**)&GenMeshCubicmap, "GenMeshCubicmap");
   lib.bindSymbol(cast(void**)&LoadMaterials, "LoadMaterials");
   lib.bindSymbol(cast(void**)&LoadMaterialDefault, "LoadMaterialDefault");
   lib.bindSymbol(cast(void**)&UnloadMaterial, "UnloadMaterial");
   lib.bindSymbol(cast(void**)&SetMaterialTexture, "SetMaterialTexture");
   lib.bindSymbol(cast(void**)&SetModelMeshMaterial, "SetModelMeshMaterial");
   lib.bindSymbol(cast(void**)&LoadModelAnimations, "LoadModelAnimations");
   lib.bindSymbol(cast(void**)&UpdateModelAnimation, "UpdateModelAnimation");
   lib.bindSymbol(cast(void**)&UnloadModelAnimation, "UnloadModelAnimation");
   lib.bindSymbol(cast(void**)&UnloadModelAnimations, "UnloadModelAnimations");
   lib.bindSymbol(cast(void**)&IsModelAnimationValid, "IsModelAnimationValid");
   lib.bindSymbol(cast(void**)&CheckCollisionSpheres, "CheckCollisionSpheres");
   lib.bindSymbol(cast(void**)&CheckCollisionBoxes, "CheckCollisionBoxes");
   lib.bindSymbol(cast(void**)&CheckCollisionBoxSphere, "CheckCollisionBoxSphere");
   lib.bindSymbol(cast(void**)&GetRayCollisionSphere, "GetRayCollisionSphere");
   lib.bindSymbol(cast(void**)&GetRayCollisionBox, "GetRayCollisionBox");
   lib.bindSymbol(cast(void**)&GetRayCollisionModel, "GetRayCollisionModel");
   lib.bindSymbol(cast(void**)&GetRayCollisionMesh, "GetRayCollisionMesh");
   lib.bindSymbol(cast(void**)&GetRayCollisionTriangle, "GetRayCollisionTriangle");
   lib.bindSymbol(cast(void**)&GetRayCollisionQuad, "GetRayCollisionQuad");
   lib.bindSymbol(cast(void**)&InitAudioDevice, "InitAudioDevice");
   lib.bindSymbol(cast(void**)&CloseAudioDevice, "CloseAudioDevice");
   lib.bindSymbol(cast(void**)&IsAudioDeviceReady, "IsAudioDeviceReady");
   lib.bindSymbol(cast(void**)&SetMasterVolume, "SetMasterVolume");
   lib.bindSymbol(cast(void**)&LoadWave, "LoadWave");
   lib.bindSymbol(cast(void**)&LoadWaveFromMemory, "LoadWaveFromMemory");
   lib.bindSymbol(cast(void**)&LoadSound, "LoadSound");
   lib.bindSymbol(cast(void**)&LoadSoundFromWave, "LoadSoundFromWave");
   lib.bindSymbol(cast(void**)&UpdateSound, "UpdateSound");
   lib.bindSymbol(cast(void**)&UnloadWave, "UnloadWave");
   lib.bindSymbol(cast(void**)&UnloadSound, "UnloadSound");
   lib.bindSymbol(cast(void**)&ExportWave, "ExportWave");
   lib.bindSymbol(cast(void**)&ExportWaveAsCode, "ExportWaveAsCode");
   lib.bindSymbol(cast(void**)&PlaySound, "PlaySound");
   lib.bindSymbol(cast(void**)&StopSound, "StopSound");
   lib.bindSymbol(cast(void**)&PauseSound, "PauseSound");
   lib.bindSymbol(cast(void**)&ResumeSound, "ResumeSound");
   lib.bindSymbol(cast(void**)&PlaySoundMulti, "PlaySoundMulti");
   lib.bindSymbol(cast(void**)&StopSoundMulti, "StopSoundMulti");
   lib.bindSymbol(cast(void**)&GetSoundsPlaying, "GetSoundsPlaying");
   lib.bindSymbol(cast(void**)&IsSoundPlaying, "IsSoundPlaying");
   lib.bindSymbol(cast(void**)&SetSoundVolume, "SetSoundVolume");
   lib.bindSymbol(cast(void**)&SetSoundPitch, "SetSoundPitch");
   lib.bindSymbol(cast(void**)&WaveFormat, "WaveFormat");
   lib.bindSymbol(cast(void**)&WaveCopy, "WaveCopy");
   lib.bindSymbol(cast(void**)&WaveCrop, "WaveCrop");
   lib.bindSymbol(cast(void**)&LoadWaveSamples, "LoadWaveSamples");
   lib.bindSymbol(cast(void**)&UnloadWaveSamples, "UnloadWaveSamples");
   lib.bindSymbol(cast(void**)&LoadMusicStream, "LoadMusicStream");
   lib.bindSymbol(cast(void**)&LoadMusicStreamFromMemory, "LoadMusicStreamFromMemory");
   lib.bindSymbol(cast(void**)&UnloadMusicStream, "UnloadMusicStream");
   lib.bindSymbol(cast(void**)&PlayMusicStream, "PlayMusicStream");
   lib.bindSymbol(cast(void**)&IsMusicStreamPlaying, "IsMusicStreamPlaying");
   lib.bindSymbol(cast(void**)&UpdateMusicStream, "UpdateMusicStream");
   lib.bindSymbol(cast(void**)&StopMusicStream, "StopMusicStream");
   lib.bindSymbol(cast(void**)&PauseMusicStream, "PauseMusicStream");
   lib.bindSymbol(cast(void**)&ResumeMusicStream, "ResumeMusicStream");
   lib.bindSymbol(cast(void**)&SeekMusicStream, "SeekMusicStream");
   lib.bindSymbol(cast(void**)&SetMusicVolume, "SetMusicVolume");
   lib.bindSymbol(cast(void**)&SetMusicPitch, "SetMusicPitch");
   lib.bindSymbol(cast(void**)&GetMusicTimeLength, "GetMusicTimeLength");
   lib.bindSymbol(cast(void**)&GetMusicTimePlayed, "GetMusicTimePlayed");
   lib.bindSymbol(cast(void**)&LoadAudioStream, "LoadAudioStream");
   lib.bindSymbol(cast(void**)&UnloadAudioStream, "UnloadAudioStream");
   lib.bindSymbol(cast(void**)&UpdateAudioStream, "UpdateAudioStream");
   lib.bindSymbol(cast(void**)&IsAudioStreamProcessed, "IsAudioStreamProcessed");
   lib.bindSymbol(cast(void**)&PlayAudioStream, "PlayAudioStream");
   lib.bindSymbol(cast(void**)&PauseAudioStream, "PauseAudioStream");
   lib.bindSymbol(cast(void**)&ResumeAudioStream, "ResumeAudioStream");
   lib.bindSymbol(cast(void**)&IsAudioStreamPlaying, "IsAudioStreamPlaying");
   lib.bindSymbol(cast(void**)&StopAudioStream, "StopAudioStream");
   lib.bindSymbol(cast(void**)&SetAudioStreamVolume, "SetAudioStreamVolume");
   lib.bindSymbol(cast(void**)&SetAudioStreamPitch, "SetAudioStreamPitch");
   lib.bindSymbol(cast(void**)&SetAudioStreamBufferSizeDefault, "SetAudioStreamBufferSizeDefault");
   if (errorCount() != errCount) {
      return RaylibSupport.badLibrary;
   } else {
      loadedVersion = RaylibSupport.raylib370;
   }
   static if (raylibSupport >= RaylibSupport.raylib400) {
      loadedVersion = RaylibSupport.raylib400;
   }

   return loadedVersion;
}

